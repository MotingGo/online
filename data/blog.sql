/*
Navicat MySQL Data Transfer

Source Server         : blog_connect
Source Server Version : 50553
Source Host           : 123.206.73.99:3306
Source Database       : blog

Target Server Type    : MYSQL
Target Server Version : 50553
File Encoding         : 65001

Date: 2018-04-11 04:14:03
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for attachments
-- ----------------------------
DROP TABLE IF EXISTS `attachments`;
CREATE TABLE `attachments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT '0' COMMENT '用户标识（操作者标识）',
  `url` varchar(255) DEFAULT '' COMMENT '标题',
  `path` varchar(255) DEFAULT '' COMMENT '物理路径',
  `file` varchar(255) DEFAULT '' COMMENT '文件名称',
  `type` varchar(255) DEFAULT '' COMMENT '文件类型',
  `size` int(11) DEFAULT '0' COMMENT '文件大小',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=87 DEFAULT CHARSET=utf8 COMMENT='附件';

-- ----------------------------
-- Records of attachments
-- ----------------------------
INSERT INTO `attachments` VALUES ('1', '1', 'http://otoy6enr0.bkt.clouddn.com/java.jpg', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('2', '1', 'http://otoy6enr0.bkt.clouddn.com/1511854763259_151185474.png', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('3', '1', 'http://otoy6enr0.bkt.clouddn.com/1508745267270_mima.png', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('4', '1', 'http://otoy6enr0.bkt.clouddn.com/code.jpg', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('5', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/392C1B0F282DF6E43EC7E6F6572859CE/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('6', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/273A67613CFB786C7B8B1D72E59EBAD4/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('7', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/60AD75D9C12D14B57BFBA6B816150B3D/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('8', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/DD1EDE9B48C9CC5ADD9D2FA88D113C68/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('9', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/B5691F20B80F6A6D50BE31384DE2EBBD/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('10', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/0042BDF789F758C36AA77DA6EECF210C/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('11', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/BF6D29FF7CDB8F61C70532AA9ABF29C9/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('12', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/E332A746ED03694D153A14F4968C1D78/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('13', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/AA47D960802A3E7BF1065292BE4FFD74/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('14', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/B36A9BFBB84E15A98F87463C7484CE95/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('15', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/D37FED4ABA83D4405D504CD82C217842/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('16', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/E4F37F9A4C9FA52B984D1A5FE388CA52/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('17', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/454BEB35961F6341F767E4E48F81BDBA/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('18', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/343E0790A3B820AD0682FD6B1455935D/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('19', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/AFED1435EFD48D7D6AF21B654CD37EDD/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('20', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/B4A8BEF3E891B48995152CFDDA28249E/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('21', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/5C0E43871D29C28CEB9F0132A08194D4/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('22', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/455BD8AAB53642C245C1BE35139E4842/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('23', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/E3FCBDD1125C13586377B8428E6E3D2D/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('24', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/05DBA32E4822FF6F355DE0E6E6DEB906/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('25', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/392C1B0F282DF6E43EC7E6F6572859CE/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('26', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/273A67613CFB786C7B8B1D72E59EBAD4/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('27', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/DD1EDE9B48C9CC5ADD9D2FA88D113C68/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('28', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/455BD8AAB53642C245C1BE35139E4842/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('29', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/42524446DC4D68436DAB97B6DF4A5AB1/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('30', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/E9E8EA22559C8F386E29B1ACCD97B803/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('31', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/E9E8EA22559C8F386E29B1ACCD97B803/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('32', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/5DF6C5A307D85EDAA23EB9CCE2076E25/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('33', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/CF630CF47DCBCA67A3EEB4CE34860908/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('34', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/DABB7980A71DBEE322219192B6F9FF9C/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('35', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/0CFC672179E87E93D6514FE9B4195C15/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('36', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/BB37D5367152FCBCCFA021B46FEACC7A/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('37', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/01BFE4BA8344615261F65E6C5D474961/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('38', '0', 'http://qzapp.qlogo.cn/qzapp/101422433/E91F5FC457A88D9C0A9DC08D75387249/100', '', '', '', '0', '0', '0', '0');
INSERT INTO `attachments` VALUES ('39', '1', 'http://123.206.73.99/uploads\\aa5fabfbcde53e875213f02f27f9a8c4.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\01\\aa5fabfbcde53e875213f02f27f9a8c4.jpg', 'aa5fabfbcde53e875213f02f27f9a8c4.jpg', 'image/jpeg', '18372', '0', '1522595754', '0');
INSERT INTO `attachments` VALUES ('40', '1', 'http://123.206.73.99/uploads\\2018\\04\\01\\65c5cea89adfdea8ebf382d89a57f450.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\01\\65c5cea89adfdea8ebf382d89a57f450.jpg', '65c5cea89adfdea8ebf382d89a57f450.jpg', 'image/jpeg', '18372', '0', '1522595879', '0');
INSERT INTO `attachments` VALUES ('41', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\2783c981b022bcf4d2193f0f4fb94d2f.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\2783c981b022bcf4d2193f0f4fb94d2f.jpg', '2783c981b022bcf4d2193f0f4fb94d2f.jpg', 'image/jpeg', '18372', '0', '1522602506', '0');
INSERT INTO `attachments` VALUES ('42', '0', 'http://123.206.73.99/uploads\\2018\\04\\02\\eee6f9adf6ca75e7b1d757f480b565d8.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\eee6f9adf6ca75e7b1d757f480b565d8.jpg', 'eee6f9adf6ca75e7b1d757f480b565d8.jpg', 'image/jpeg', '56104', '0', '1522602533', '0');
INSERT INTO `attachments` VALUES ('43', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\180d3458cfac9b9d49e695cdeeff7c5c.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\180d3458cfac9b9d49e695cdeeff7c5c.jpg', '180d3458cfac9b9d49e695cdeeff7c5c.jpg', 'image/jpeg', '56104', '0', '1522602602', '0');
INSERT INTO `attachments` VALUES ('44', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\c40059a5fa626cd334abb453b0ee9f18.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\c40059a5fa626cd334abb453b0ee9f18.jpg', 'c40059a5fa626cd334abb453b0ee9f18.jpg', 'image/jpeg', '56104', '0', '1522602768', '0');
INSERT INTO `attachments` VALUES ('45', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\f8a665ad993892a3bba86f9f3a6b3246.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\f8a665ad993892a3bba86f9f3a6b3246.jpg', 'f8a665ad993892a3bba86f9f3a6b3246.jpg', 'image/jpeg', '56104', '0', '1522602839', '0');
INSERT INTO `attachments` VALUES ('46', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\23344ac8c375b0570976f278321316e4.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\23344ac8c375b0570976f278321316e4.jpg', '23344ac8c375b0570976f278321316e4.jpg', 'image/jpeg', '18372', '0', '1522602902', '0');
INSERT INTO `attachments` VALUES ('47', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\a9ade07ef454e29af68d13e683ec25ef.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\a9ade07ef454e29af68d13e683ec25ef.jpg', 'a9ade07ef454e29af68d13e683ec25ef.jpg', 'image/jpeg', '33421', '0', '1522603589', '0');
INSERT INTO `attachments` VALUES ('48', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\0c36f7bb53681642160fea83494a7151.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\0c36f7bb53681642160fea83494a7151.jpg', '0c36f7bb53681642160fea83494a7151.jpg', 'image/jpeg', '33421', '0', '1522603631', '0');
INSERT INTO `attachments` VALUES ('49', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\4d959649cac5522ee20e8b6a021a4d14.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\4d959649cac5522ee20e8b6a021a4d14.jpg', '4d959649cac5522ee20e8b6a021a4d14.jpg', 'image/jpeg', '10610', '0', '1522604117', '0');
INSERT INTO `attachments` VALUES ('50', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\5141d8d2bf782b569e3691a76e052c31.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\5141d8d2bf782b569e3691a76e052c31.jpg', '5141d8d2bf782b569e3691a76e052c31.jpg', 'image/jpeg', '33421', '0', '1522605246', '0');
INSERT INTO `attachments` VALUES ('51', '1', 'http://123.206.73.99/uploads\\2018\\04\\02\\561b0e2504e60d6e537b026bbf4de175.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\02\\561b0e2504e60d6e537b026bbf4de175.jpg', '561b0e2504e60d6e537b026bbf4de175.jpg', 'image/jpeg', '33421', '0', '1522605714', '0');
INSERT INTO `attachments` VALUES ('52', '1', 'http://123.206.73.99/uploads/2018/04/03/a2d4c0eb33157e657dd5e060b8fd216d.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\03\\a2d4c0eb33157e657dd5e060b8fd216d.jpg', 'a2d4c0eb33157e657dd5e060b8fd216d.jpg', 'image/jpeg', '17297', '0', '1522762109', '0');
INSERT INTO `attachments` VALUES ('53', '0', 'http://123.206.73.99/uploads/2018/04/03/9004cf4c61268c19d75a05547c06706b.png', 'F:\\YuJian\\public\\uploads\\2018\\04\\03\\9004cf4c61268c19d75a05547c06706b.png', '9004cf4c61268c19d75a05547c06706b.png', 'image/png', '80904', '0', '1522769614', '0');
INSERT INTO `attachments` VALUES ('54', '0', 'http://123.206.73.99/uploads/2018/04/03/ee80f0deee04f6cdc30fbe7d663bea88.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\03\\ee80f0deee04f6cdc30fbe7d663bea88.jpg', 'ee80f0deee04f6cdc30fbe7d663bea88.jpg', 'image/jpeg', '56104', '0', '1522769685', '0');
INSERT INTO `attachments` VALUES ('55', '1', 'http://123.206.73.99/uploads/2018/04/03/fa55ee7e830145433b9d88910731447a.png', 'F:\\YuJian\\public\\uploads\\2018\\04\\03\\fa55ee7e830145433b9d88910731447a.png', 'fa55ee7e830145433b9d88910731447a.png', 'image/png', '80904', '0', '1522769731', '0');
INSERT INTO `attachments` VALUES ('56', '0', 'http://123.206.73.99/uploads/2018/04/06/e029663cc67120d58525b4c12692a810.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\e029663cc67120d58525b4c12692a810.jpg', 'e029663cc67120d58525b4c12692a810.jpg', 'image/jpeg', '56104', '0', '1522992036', '0');
INSERT INTO `attachments` VALUES ('57', '0', 'http://123.206.73.99/uploads/2018/04/06/3b9fe9c8e7f3e6ab150c3d36f6a844ae.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\3b9fe9c8e7f3e6ab150c3d36f6a844ae.jpg', '3b9fe9c8e7f3e6ab150c3d36f6a844ae.jpg', 'image/jpeg', '56104', '0', '1522992336', '0');
INSERT INTO `attachments` VALUES ('58', '0', 'http://123.206.73.99/uploads/2018/04/06/022f8f881cf04a8f68f8a0025fa0e700.png', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\022f8f881cf04a8f68f8a0025fa0e700.png', '022f8f881cf04a8f68f8a0025fa0e700.png', 'image/png', '80904', '0', '1522992364', '0');
INSERT INTO `attachments` VALUES ('59', '0', 'http://123.206.73.99/uploads/2018/04/06/9935726bc34bc439baaa1fd50a205256.png', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\9935726bc34bc439baaa1fd50a205256.png', '9935726bc34bc439baaa1fd50a205256.png', 'image/png', '3625', '0', '1522992441', '0');
INSERT INTO `attachments` VALUES ('60', '0', 'http://123.206.73.99/uploads/2018/04/06/d6c84458873d9449a002cd43a26ec345.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\d6c84458873d9449a002cd43a26ec345.jpg', 'd6c84458873d9449a002cd43a26ec345.jpg', 'image/jpeg', '18372', '0', '1522992446', '0');
INSERT INTO `attachments` VALUES ('61', '0', 'http://123.206.73.99/uploads/2018/04/06/530e8712a07b20efa8507c6d06aee070.png', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\530e8712a07b20efa8507c6d06aee070.png', '530e8712a07b20efa8507c6d06aee070.png', 'image/png', '3625', '0', '1522992450', '0');
INSERT INTO `attachments` VALUES ('62', '0', 'http://123.206.73.99/uploads/2018/04/06/96bd00ee88f8b098107106bb3ff103e6.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\96bd00ee88f8b098107106bb3ff103e6.jpg', '96bd00ee88f8b098107106bb3ff103e6.jpg', 'image/jpeg', '33421', '0', '1522992818', '0');
INSERT INTO `attachments` VALUES ('63', '0', 'http://123.206.73.99/uploads/2018/04/06/e1498d0e2b1af3bd03c7b0b186b269d6.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\e1498d0e2b1af3bd03c7b0b186b269d6.jpg', 'e1498d0e2b1af3bd03c7b0b186b269d6.jpg', 'image/jpeg', '17297', '0', '1522992875', '0');
INSERT INTO `attachments` VALUES ('64', '0', 'http://123.206.73.99/uploads/2018/04/06/828c6183dbbe734d292e1249c4852a8f.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\828c6183dbbe734d292e1249c4852a8f.jpg', '828c6183dbbe734d292e1249c4852a8f.jpg', 'image/jpeg', '17297', '0', '1522992902', '0');
INSERT INTO `attachments` VALUES ('65', '0', 'http://123.206.73.99/uploads/2018/04/06/90a12290ba861f9105b09a14e46b4218.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\90a12290ba861f9105b09a14e46b4218.jpg', '90a12290ba861f9105b09a14e46b4218.jpg', 'image/jpeg', '10610', '0', '1522993655', '0');
INSERT INTO `attachments` VALUES ('66', '0', 'http://123.206.73.99/uploads/2018/04/06/f0ebf99f3d7f213961b5340f7e98c581.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\f0ebf99f3d7f213961b5340f7e98c581.jpg', 'f0ebf99f3d7f213961b5340f7e98c581.jpg', 'image/jpeg', '10610', '0', '1522993712', '0');
INSERT INTO `attachments` VALUES ('67', '1', 'http://123.206.73.99/uploads/2018/04/06/9260c2f21fb19361f503f2e1b1d7b1b4.png', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\9260c2f21fb19361f503f2e1b1d7b1b4.png', '9260c2f21fb19361f503f2e1b1d7b1b4.png', 'image/png', '136236', '0', '1523003856', '0');
INSERT INTO `attachments` VALUES ('68', '1', 'http://123.206.73.99/uploads/2018/04/06/7a70a2f00c18a38494cdf3b869841fb3.png', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\7a70a2f00c18a38494cdf3b869841fb3.png', '7a70a2f00c18a38494cdf3b869841fb3.png', 'image/png', '136236', '0', '1523003907', '0');
INSERT INTO `attachments` VALUES ('69', '1', 'http://123.206.73.99/uploads/2018/04/06/a15cb8f9cbdcbb1a05fa5b3b0594a37c.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\a15cb8f9cbdcbb1a05fa5b3b0594a37c.jpg', 'a15cb8f9cbdcbb1a05fa5b3b0594a37c.jpg', 'image/jpeg', '26459', '0', '1523007368', '0');
INSERT INTO `attachments` VALUES ('70', '1', 'http://123.206.73.99/uploads/2018/04/06/a004651e13a85c80de4be1ad02330f7b.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\a004651e13a85c80de4be1ad02330f7b.jpg', 'a004651e13a85c80de4be1ad02330f7b.jpg', 'image/jpeg', '32581', '0', '1523007488', '0');
INSERT INTO `attachments` VALUES ('71', '1', 'http://123.206.73.99/uploads/2018/04/06/3bf825922edfad9ec3661228d00064ab.jpg', 'F:\\YuJian\\public\\uploads\\2018\\04\\06\\3bf825922edfad9ec3661228d00064ab.jpg', '3bf825922edfad9ec3661228d00064ab.jpg', 'image/jpeg', '20289', '0', '1523007571', '0');
INSERT INTO `attachments` VALUES ('72', '0', 'http://123.206.73.99/uploads/2018/04/07/09e3fec4308ca1c56dcace740698b4e7.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/07/09e3fec4308ca1c56dcace740698b4e7.jpg', '09e3fec4308ca1c56dcace740698b4e7.jpg', 'image/jpeg', '33952', '0', '1523053254', '0');
INSERT INTO `attachments` VALUES ('73', '1', 'http://123.206.73.99/uploads/2018/04/11/4ff746602daf0f5bbe15db2623982efc.png', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/4ff746602daf0f5bbe15db2623982efc.png', '4ff746602daf0f5bbe15db2623982efc.png', 'image/png', '2081', '0', '1523384032', '0');
INSERT INTO `attachments` VALUES ('74', '1', 'http://123.206.73.99/uploads/2018/04/11/63938223dde113090a0a7976d976b0f5.png', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/63938223dde113090a0a7976d976b0f5.png', '63938223dde113090a0a7976d976b0f5.png', 'image/png', '2081', '0', '1523384056', '0');
INSERT INTO `attachments` VALUES ('75', '1', 'http://123.206.73.99/uploads/2018/04/11/28618287a4a45be4a5dc0bfaecab0225.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/28618287a4a45be4a5dc0bfaecab0225.jpg', '28618287a4a45be4a5dc0bfaecab0225.jpg', 'image/jpeg', '6896', '0', '1523384096', '0');
INSERT INTO `attachments` VALUES ('76', '1', 'http://123.206.73.99/uploads/2018/04/11/39da9080f830778f6aac1d00ce0b9a2f.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/39da9080f830778f6aac1d00ce0b9a2f.jpg', '39da9080f830778f6aac1d00ce0b9a2f.jpg', 'image/jpeg', '6896', '0', '1523384364', '0');
INSERT INTO `attachments` VALUES ('77', '1', 'http://123.206.73.99/uploads/2018/04/11/3e25d9e119a4e840e85b45a4e5f18873.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/3e25d9e119a4e840e85b45a4e5f18873.jpg', '3e25d9e119a4e840e85b45a4e5f18873.jpg', 'image/jpeg', '3523', '0', '1523384478', '0');
INSERT INTO `attachments` VALUES ('78', '1', 'http://123.206.73.99/uploads/2018/04/11/4d242af83b44a84506afbe4f9c3b6cfd.png', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/4d242af83b44a84506afbe4f9c3b6cfd.png', '4d242af83b44a84506afbe4f9c3b6cfd.png', 'image/png', '17787', '0', '1523384624', '0');
INSERT INTO `attachments` VALUES ('79', '1', 'http://123.206.73.99/uploads/2018/04/11/b16c48935cbb58d90d96210d62858819.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/b16c48935cbb58d90d96210d62858819.jpg', 'b16c48935cbb58d90d96210d62858819.jpg', 'image/jpeg', '20289', '0', '1523384630', '0');
INSERT INTO `attachments` VALUES ('80', '1', 'http://123.206.73.99/uploads/2018/04/11/74c150fc2cdb42f993212edcebbe3d2b.png', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/74c150fc2cdb42f993212edcebbe3d2b.png', '74c150fc2cdb42f993212edcebbe3d2b.png', 'image/png', '17787', '0', '1523386113', '0');
INSERT INTO `attachments` VALUES ('81', '1', 'http://123.206.73.99/uploads/2018/04/11/367127ff8ba0fb9c70218c903ab443ce.png', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/367127ff8ba0fb9c70218c903ab443ce.png', '367127ff8ba0fb9c70218c903ab443ce.png', 'image/png', '17787', '0', '1523386679', '0');
INSERT INTO `attachments` VALUES ('82', '1', 'http://123.206.73.99/uploads/2018/04/11/5bc483cff38665f08cc634875c27ea8b.png', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/5bc483cff38665f08cc634875c27ea8b.png', '5bc483cff38665f08cc634875c27ea8b.png', 'image/png', '17787', '0', '1523386727', '0');
INSERT INTO `attachments` VALUES ('83', '1', 'http://123.206.73.99/uploads/2018/04/11/cdb495839e5a4bcac435c4e635c29bce.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/cdb495839e5a4bcac435c4e635c29bce.jpg', 'cdb495839e5a4bcac435c4e635c29bce.jpg', 'image/jpeg', '6586', '0', '1523386737', '0');
INSERT INTO `attachments` VALUES ('84', '1', 'http://123.206.73.99/uploads/2018/04/11/2ea6c6cd984d9e769d80adb26e61cb59.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/2ea6c6cd984d9e769d80adb26e61cb59.jpg', '2ea6c6cd984d9e769d80adb26e61cb59.jpg', 'image/jpeg', '3523', '0', '1523386746', '0');
INSERT INTO `attachments` VALUES ('85', '1', 'http://123.206.73.99/uploads/2018/04/11/b89c7a6ab1cb4222be536b93b0b2fb8b.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/b89c7a6ab1cb4222be536b93b0b2fb8b.jpg', 'b89c7a6ab1cb4222be536b93b0b2fb8b.jpg', 'image/jpeg', '56058', '0', '1523386875', '0');
INSERT INTO `attachments` VALUES ('86', '1', 'http://123.206.73.99/uploads/2018/04/11/8f07d1f5ecd1719ee390cf73adc74797.jpg', '/usr/local/apache/htdocs/yujian/public/uploads/2018/04/11/8f07d1f5ecd1719ee390cf73adc74797.jpg', '8f07d1f5ecd1719ee390cf73adc74797.jpg', 'image/jpeg', '6094', '0', '1523387266', '0');

-- ----------------------------
-- Table structure for blog_article_attahcments
-- ----------------------------
DROP TABLE IF EXISTS `blog_article_attahcments`;
CREATE TABLE `blog_article_attahcments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT '0' COMMENT '用户标识（操作者标识）',
  `article_id` int(11) DEFAULT '0' COMMENT '文章',
  `attachment_id` int(11) DEFAULT '0' COMMENT '附件',
  `download_num` int(11) DEFAULT '0' COMMENT '下载次数',
  `is_control` tinyint(1) DEFAULT '0' COMMENT '控制标识：0-默认不需要评论，1-需要评论',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='资源附件';

-- ----------------------------
-- Records of blog_article_attahcments
-- ----------------------------

-- ----------------------------
-- Table structure for blog_articles
-- ----------------------------
DROP TABLE IF EXISTS `blog_articles`;
CREATE TABLE `blog_articles` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT '0' COMMENT '用户标识（操作者标识）',
  `thumbnail_id` int(11) DEFAULT '0' COMMENT '预览图',
  `title` varchar(255) DEFAULT '' COMMENT '标题',
  `label_id` tinyint(1) DEFAULT '0' COMMENT '标签类型：0-原创，1-转载',
  `summary` varchar(2048) DEFAULT '' COMMENT '简介',
  `content` text COMMENT '主要内容',
  `type` tinyint(1) DEFAULT '0' COMMENT '类型：0-默认，1-文章 2-资源分享',
  `display_at` int(11) DEFAULT '0' COMMENT '显示时间',
  `comment_num` int(11) DEFAULT '0' COMMENT '评论人数',
  `reader_num` int(11) DEFAULT '0' COMMENT '阅读人数',
  `is_display` tinyint(1) DEFAULT '0' COMMENT '显示标识',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COMMENT='文章';

-- ----------------------------
-- Records of blog_articles
-- ----------------------------
INSERT INTO `blog_articles` VALUES ('1', '1', '1', '深入详解Java中的hashcode()与equals()方法', '5', '111Java中的超级父类java.lang.Object定义了两个重要方法：hashCode()与equals()方法。它们不仅被大量地直接使用，而且与集合容器，特别是与基于哈希机制的集合容器有着紧密的联系。本文中，我们首先提供一个常见的错误代码示例，接着分析错误原因，最后详细阐述hashcode()与equals...', '<div class=\"article-detail-content\" id=\"content\"> <p>Java中的超级父类 java.lang.Object 定义了两个重要方法：hashCode()与equals()方法。它们不仅被大量地直接使用，而且与集合容器，特别是与基于哈希机制的集合容器有着紧密的联系。本文中，我们首先提供一个常见的错误代码示例，接着分析错误原因，最后详细阐述 hashcode() 与 equals() 方法之间的契约。</p> <p>public boolean equals(Object obj);<br>public int hashCode();</p> <p>常见错误<br>public class Cat {<br>private String color;</p> <p>public Cat(String color) {<br>this.color = color;<br>}</p> <p><a href=\"https://github.com/Override\" title=\"@Override\" class=\"at-link\">@Override</a><br>public boolean equals(Object obj) {<br>if (obj == null) return false;<br>if (!(obj instanceof Cat)) return false;<br>if (obj == this) return true;<br>return this.color.equals(((Cat) obj).color);<br>}</p> <p>public static void main(String[] args) {<br>Cat catA = new Cat(“white”);<br>Cat catB = new Cat(“black”);<br>HashMap<cat, integer=\"\"> maps = new HashMap&lt;&gt;();<br>maps.put(catA, 10);<br>maps.put(catB, 20);<br>System.out.println(maps.get(new Cat(“white”)));<br>}<br>}</cat,></p> <p>建议读者自己仔细思考得出答案后，再上级运行代码获得答案，正确的答案是打印了 null 。我们来分析一下该代码的结构，在该代码中，一个白色的猫对象被成功地存储在HashMap容器maps中，当尝试从该maps中查找该白色的猫对象时，却没有发现该对象。但是，我们可以通过使用IDE的debugger面板去检查HashMap容器maps，会发现白色的猫对象是已经存储在该maps中的。</p> <h4 id=\"h4-u89E3u51B3u65B9u6848\"><a name=\"解决方案\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>解决方案</h4><p>造成错误的原因就在于Cat类只重写了equals()方法，没有相应地重写hashcode()方法。在Java中，一个类的equals()方法和hashCode()方法存在如下契约：</p> <ol> <li>如果两个对象是相等的，那么他们的hashCode必须是相同的。</li><li>如果两个对象具有相同的hashCode，它们可以相等，也可以不相等。</li></ol> <p>总结起来就是一句话：如果重写了某类的equals()方法，那么肯定也需要重写该类的hashCode()方法，而且两个对象的equals()返回值相等的情况下，这两个对象的hashCode()方法的返回值也必须相等。</p> <p>Java中的任何类，只有在遵守equals()方法与hashCode()方法之间的契约情况下，才能正确的作为各种基于哈希机制的集合容器的键，比如示例代码中的HashMap。通过使用哈希机制，HashMap的查找指定元素方法具有 O(1) 的时间复杂度，远远优于普通容器的线性时间复杂度。在HashMap中，通过哈希后的键去查找对应的值可以分为两个步骤。对于 Map 结构容器，我们可以看作成元素为数组的一个数组，元素在第一层数组的索引号就是其键的hashCode()值，在第二层数组中，元素使用其equals()来定位与判断该元素是否已存储。</p> <p>对于Java中所有类的超级父类java.lang.Object而言，其hashCode()的默认实现是：对于不同的对象就返回不同的整型值。上述示例代码中，Cat类没有重写Object的hashCode()方法。所以，这条代码：</p> <p>System.out.println(maps.get(new Cat(“white”)));</p> <p>创建的Cat对象具有与catA不同的hashCode。</p> <p>哈希机制的引入极大地提高了在集合容器中查找特定元素的速度。哈希码就像一系列的桶，不同哈希码的对象往往对应到不同的桶中。但是，不同的键值在经过哈希后，被对应到了同一个桶中，这取决于哈希函数的选取。好的哈希函数应该尽可能把不同键的值分配到不同的桶中。关于哈希机制的学习请参看本站的其他文章。</p> <p>最后，我们给出一个上述问题代码的解决方案，把下面的代码添加到Cat类中即可。</p> <p><a href=\"https://github.com/Override\" title=\"@Override\" class=\"at-link\">@Override</a><br>public int hashCode() {<br>return this.color.hashCode();<br>}</p> <p><code>转自http://www.tiantianbianma.com/java-hashcode-equals.html/</code></p> </div>', '2', '1511809879', '3', '377', '1', '0', '1521566605', '1522691672');
INSERT INTO `blog_articles` VALUES ('2', '1', '2', 'Java中的迭代与递归', '5', '我们知道，任何简单或者复杂的程序流程都可以拆分为顺序结构、选择结构和循环结构。其中顺序结构和条件结构相对比较简单，循环结构相对复杂，递归和迭代都是循环结构的实现方式。简单地说，递归是函数重复调用自身来实现循环；迭代是函数内某段代码实现循环。递归假设我们需要实现阶乘函数：n!=n(n-1)(n-2)…1。当然，我...', '<div class=\"article-detail-content markdown-body editormd-html-preview\" id=\"content\">\r\n                        	<p>我们知道，任何简单或者复杂的程序流程都可以拆分为 顺序结构、选择结构和循环结构。其中顺序结构和条件结构相对比较简单，循环结构相对复杂，递归和迭代都是循环结构的实现方式。简单地说，递归是函数重复调用自身来实现循环；迭代是函数内某段代码实现循环。</p>\r\n<h4 id=\"h4-u9012u5F52\"><a name=\"递归\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>递归</h4><p>假设我们需要实现阶乘函数： n! = n <em> (n-1) </em> (n-2) <em> … </em> 1 。<br>当然，我们可以用多种方式来实现这个函数，方法之一是我们发现 n! = n * (n-1)! 。因此，我们可以采用如下的代码直接实现该函数。</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">int</span><span class=\"pln\"> factorial</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> n</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"kwd\">if</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"pln\">n </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L2\"><code><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code><span class=\"pun\">}</span><span class=\"pln\"> </span><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"kwd\">return</span><span class=\"pln\"> n </span><span class=\"pun\">*</span><span class=\"pln\"> factorial</span><span class=\"pun\">(</span><span class=\"pln\">n</span><span class=\"pun\">-</span><span class=\"lit\">1</span><span class=\"pun\">);</span></code></li><li class=\"L5\"><code><span class=\"pun\">}</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>在执行这个代码片段的过程中，JVM需要建立一条乘法操作的链条：factorial(n) -&gt; factorial(n-1) -&gt; factorial(n-2) -&gt; … -&gt; factorial(1)。应此，JVM中需要有相应的机制去保持这么多的链条元素，其中的每次调用都对应到JVM的栈空间的一个栈帧。这种实现方式，具有一条操作链条，就是标准的递归实现方式。按照递归的流程，递归可以进一步被分类为线性递归和树形递归。当递归过程中需要保持的信息是以线性方式增长的时候，这种递归情况就成为线性递归。我们此处求阶乘所实现的示例代码就是属于线性递归，因为递归过程中时间消耗的增长是线性的。另一个递归方式，树形递归，在递归的过程中需要保持的中间状态是分支形式增长的，本文将不会深入探讨这两种递归方式的异同，今后可能会有专文来讲解它们，欢迎收藏本站。</p>\r\n<h4 id=\"h4-u8FEDu4EE3\"><a name=\"迭代\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>迭代</h4><p>对于同样的计算N的阶乘问题，我们可以从一种全新的视觉来看分析。首先：1 <em> 2,然后：前一步的结果 </em> 3,再然后： 前一步的结果 <em> 4, … , 最后：前一步的结果 </em> n。这个过程翻译成为Java代码的话，可以使用一个计数器从1开始，每次增长1，直到到n为止，同时，累积每次的计算结果，知道超过n。翻译出来的示例代码如下所示：</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">int</span><span class=\"pln\"> factorial</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> n</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"kwd\">int</span><span class=\"pln\"> product </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">2</span><span class=\"pun\">;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;</span><span class=\"pln\"> n</span><span class=\"pun\">;</span><span class=\"pln\"> i</span><span class=\"pun\">++)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L3\"><code><span class=\"pln\">product </span><span class=\"pun\">*=</span><span class=\"pln\"> i</span><span class=\"pun\">;</span></code></li><li class=\"L4\"><code><span class=\"pun\">}</span></code></li><li class=\"L5\"><code><span class=\"kwd\">return</span><span class=\"pln\"> product</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>我们把此示例代码与上面一个实例代码进行比较，可以发现此代码不需要建立一条乘法操作的链条。在每一步中，JVM只需要保持product和i的瞬时值，这种类型的实现方式就是迭代方式。这种方式的中间状态可以被固定数量的变量保持住，此处只使用了product和i两个变量。注意：无论是迭代方式还是递归方式，都需要特别注意循环的结束条件，或者造成死循环就悲剧了。此外，我们此处的迭代代码的时间消耗会随着输入值的增长而线性增长，也就称为线性迭代方式。</p>\r\n<h4 id=\"h4--vs-\"><a name=\"递归 VS 迭代\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>递归 VS 迭代</h4><p>仔细比较上述的两个示例代码，可以发现它们具有非常多类似的地方，特别是其中的核心求值部分。为了求出最终的结果，它们都需要经历n个小步骤。另一方面，当我们仔细考虑两者的实际运行过程时，会发现它们之间的巨大差异。</p>\r\n<p>对于迭代方式，使用代码中的少些变量就完全保持了循环过程中的状态。如果在迭代的过程中，中断迭代的运行后，再恢复此次迭代过程只需要提供正确的变量初始值即可。然后，如果在递归的过程中，一旦中断了递归的运行，基本就不可能恢复此次递归过程了。因为递归过程的很多中间状态变量被保存在此次递归的执行上下中，而不是代码本身，无法恢复。</p>\r\n<h4 id=\"h4-u6811u5F62u9012u5F52\"><a name=\"树形递归\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>树形递归</h4><p>作为递归分类中比较复杂的情形，树形递归过程中需要保持的中间变量随着输入值的增长呈现树形增长。我们举个简单的例子来说明，数学中常见的 Fibonacci 公式：<img src=\"http://otoy6enr0.bkt.clouddn.com/1511854763259_151185474.png\" alt=\"斐波那契数列\" title=\"斐波那契数列\"></p>\r\n<p>通过该公式定义，我们发现Fibonacci序列的规律是：每个序列值都是前两个值的和。Fibonacci序列的前几项数值如下：0，1，1，2，3，5，8，13，21，…</p>\r\n<p>对照着Fabonacci公式的定义，我们可以翻译出对应的代码为：</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">int</span><span class=\"pln\"> fib</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> n</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">n </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"kwd\">if</span><span class=\"pun\">(</span><span class=\"pln\">n </span><span class=\"pun\">==</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"kwd\">return</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code><span class=\"kwd\">else</span><span class=\"pln\"> </span><span class=\"kwd\">return</span><span class=\"pln\"> fib</span><span class=\"pun\">(</span><span class=\"pln\">n</span><span class=\"pun\">-</span><span class=\"lit\">1</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">+</span><span class=\"pln\"> fib</span><span class=\"pun\">(</span><span class=\"pln\">n</span><span class=\"pun\">-</span><span class=\"lit\">2</span><span class=\"pun\">);</span></code></li><li class=\"L4\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>因此，为了计算fib(5)的结果，必须先要计算出fib(3)和fib(4)的值，为了计算fib(4)的值，又必须先计算出fib(2)和fib(3)的值。仔细观察可以发现，在方法体中的最后一行，这个fib(int)函数会调用自身两次。此外，我们还发现了如下两个现象：</p>\r\n<ol>\r\n<li>Fibonacci序列的第i个值等于 phi(i)/rootsquare(5) 向下取值的整型值，这意味着Fibonacci值不是线程增长的。</li><li>这种计算Fibonacci序列的方式是低效的，因为此过程中有大量的重复计算。如果我们需要计算的Fibonacci值是序列中比较靠后的值，这个代码片段的耗时会非常长。我们可以在任何一本好的算法书中发现此示例代码的时间复杂度为O(phi(n))。</li></ol>\r\n<p>两个现象都表明，随着输入值的增长，这个示例代码的耗时增长是树形的。</p>\r\n<p>当然，我们可以使用迭代的方式来重写上面求Fibonacci序列的示例代码。下面，我们给出一种线性迭代方式的示例代码。此代码与递归实现的代码片段在时间消耗上面的差异是非常巨大的，对于输入值不大的计算过程同样如何。</p>\r\n<pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"kwd\">int</span><span class=\"pln\"> fib</span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> n</span><span class=\"pun\">)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L1\"><code><span class=\"kwd\">int</span><span class=\"pln\"> fib </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span></code></li><li class=\"L2\"><code><span class=\"kwd\">int</span><span class=\"pln\"> a </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">1</span><span class=\"pun\">;</span></code></li><li class=\"L3\"><code><span class=\"kwd\">for</span><span class=\"pln\"> </span><span class=\"pun\">(</span><span class=\"kwd\">int</span><span class=\"pln\"> i </span><span class=\"pun\">=</span><span class=\"pln\"> </span><span class=\"lit\">0</span><span class=\"pun\">;</span><span class=\"pln\"> i </span><span class=\"pun\">&lt;</span><span class=\"pln\"> n</span><span class=\"pun\">;</span><span class=\"pln\"> i</span><span class=\"pun\">++)</span><span class=\"pln\"> </span><span class=\"pun\">{</span></code></li><li class=\"L4\"><code><span class=\"pln\">fib </span><span class=\"pun\">=</span><span class=\"pln\"> fib </span><span class=\"pun\">+</span><span class=\"pln\"> a</span><span class=\"pun\">;</span></code></li><li class=\"L5\"><code><span class=\"pln\">a </span><span class=\"pun\">=</span><span class=\"pln\"> fib</span><span class=\"pun\">;</span></code></li><li class=\"L6\"><code><span class=\"pun\">}</span></code></li><li class=\"L7\"><code><span class=\"pun\">}</span></code></li></ol></pre><p>当然，你不能只因为本文给出的几个代码示例，就得出树形迭代无用的结论。当我们考虑在层级的数据结构上编写代码时，树形迭代就成为一个自然和强有力的工具。大家可以回想一下我们对 Tree 的各种先序、中序、后序遍历方式，多么清晰和自然，如果改成使用迭代方式，复杂度的提升是巨大的。通过比较Fibonacci实现方式中的递归代码和迭代代码，我们可以说，递归方式更符合人的直接思维，但却缺乏效率。所以，我们通常使用迭代的方式来求Fibonacci序列。<br><code>转自http://www.tiantianbianma.com/java-iteration-recursion.html/</code></p>\r\n\r\n 						</div>', '2', '1511809910', '1', '135', '1', '0', '1521566605', '1523390170');
INSERT INTO `blog_articles` VALUES ('3', '1', '3', '阿里云服务器centos7.3配置svn', '1', 'vpn,\n代码版本管理工具,网上有一些免费的,如果taobaocode,但是上传代码和下载代码,那个更新速度,真是分分钟钟都是在都在考研人的耐心哇.所以,我就想给自己的服务器搭建一个svn.整体尝试下来,简单的svn搭建还是soeasy的.1.安装svn服务器(subversion)yuminstallsubve...', '<div class=\"article-detail-content markdown-body editormd-html-preview\" id=\"content\">\n                        	<p>  vpn, 代码版本管理工具, 网上有一些免费的, 如果taobaocode, 但是上传代码和下载代码, 那个更新速度, 真是分分钟钟都是在都在考研人的耐心哇. 所以, 我就想给自己的服务器搭建一个svn. 整体尝试下来, 简单的svn搭建还是 so easy 的.</p>\n<h4 id=\"h4-1-svn-subversion-\"><a name=\"1. 安装svn服务器 (subversion)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1. 安装svn服务器 (subversion)</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">yum install subversion</span></code></li></ol></pre><h4 id=\"h4-2-\"><a name=\"2. 查看安装的版本\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2. 查看安装的版本</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">svnserve </span><span class=\"pun\">-</span><span class=\"pln\">version</span></code></li></ol></pre><h4 id=\"h4-3-svn-project-svn-\"><a name=\"3. 创建存放svn代码的路经(我这里/project/svn)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3. 创建存放svn代码的路经(我这里/project/svn)</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">mkdir </span><span class=\"pun\">-</span><span class=\"pln\">p </span><span class=\"pun\">/</span><span class=\"pln\">project</span><span class=\"pun\">/</span><span class=\"pln\">svn</span></code></li></ol></pre><h4 id=\"h4-4-\"><a name=\"4. 进入创建的文件夹下面\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4. 进入创建的文件夹下面</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">cd </span><span class=\"pun\">/</span><span class=\"pln\">project</span><span class=\"pun\">/</span><span class=\"pln\">svn</span></code></li></ol></pre><h4 id=\"h4-5-test\"><a name=\"5. 创建项目 项目名字如:test\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5. 创建项目 项目名字如:test</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">svnadmin create test</span></code></li></ol></pre><h3 id=\"h3-6-test-\"><a name=\"6. 进入到创建的test目录下的配置文件中,修改配置\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6. 进入到创建的test目录下的配置文件中,修改配置</h3><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">cd test</span><span class=\"pun\">/</span><span class=\"pln\">conf</span></code></li></ol></pre><h6 id=\"h6-6-1-passwd-users-username-passwd\"><a name=\"6.1 添加用户和密码,在passwd文件中[users]下面增加如:username=passwd\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.1 添加用户和密码,在passwd文件中[users]下面增加如:username=passwd</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">vim passwd</span></code></li><li class=\"L1\"><code><span class=\"com\">##在[users]下面增加用户和密码用= 如     用户名=密码</span></code></li><li class=\"L2\"><code><span class=\"com\">##增加用户名和密码,然后退出保存 shift+enter 退出编辑状态 然后输入 wq 退出保存</span></code></li></ol></pre><p><img src=\"http://otoy6enr0.bkt.clouddn.com/1508745267270_mima.png\" alt=\"\"></p>\n<h6 id=\"h6-6-2-authz-admin-admin-rw-\"><a name=\"6.2 修改 authz  =左边的admin是指这个admin的权限用户 右边的是上面的测试账号   rw是读写权限\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.2 修改 authz  =左边的admin是指这个admin的权限用户 右边的是上面的测试账号   rw是读写权限</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">vim authz  </span><span class=\"com\">## 在里新增,并保存</span></code></li></ol></pre><p><img src=\"http://otoy6enr0.bkt.clouddn.com/1508745577211_authz.png\" alt=\"修改authz\" title=\"修改authz\"></p>\n<h6 id=\"h6-6-3-svnserve-conf\"><a name=\"6.3 修改svnserve.conf\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6.3 修改svnserve.conf</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\"># anon-access = read</span></code></li><li class=\"L1\"><code><span class=\"com\"># auth-access = write</span></code></li><li class=\"L2\"><code><span class=\"com\"># password-db = passwd</span></code></li><li class=\"L3\"><code><span class=\"com\"># authz-db = authz</span></code></li><li class=\"L4\"><code><span class=\"com\"># realm = My First Repository</span></code></li><li class=\"L5\"><code><span class=\"com\">##在svnserve.conf中找到这些, 并去掉前面的#符号   把realm = My First Repository改成realm =test</span></code></li></ol></pre><blockquote>\n<p>温馨提示:如果提示找不到vim, 则需要安装一下 yum install vim<br>在编辑的状态下想退出保存, 则先退出编辑状态shift+enter 然后wq 退出保存</p>\n</blockquote>\n<h4 id=\"h4-7-svn-\"><a name=\"7. svn按照指定的文件夹启动\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7. svn按照指定的文件夹启动</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">svnserve </span><span class=\"pun\">-</span><span class=\"pln\">d </span><span class=\"pun\">-</span><span class=\"pln\">r </span><span class=\"pun\">/</span><span class=\"pln\">project</span><span class=\"pun\">/</span><span class=\"pln\">svn</span><span class=\"pun\">/</span><span class=\"pln\"> </span></code></li></ol></pre><p>到这里,一个test的项目已经svn的项目搭建已经完成了. svn访问的地址为<img src=\"http://www.emoji-cheat-sheet.com/graphics/emojis/svn.png\" class=\"emoji\" title=\":svn:\" alt=\":svn:\">//ip地址/test   如果svn已经启动了, 重新生成新项目,想要生效必须把svn的所有服务杀掉   killall svnserve.  </p>\n<blockquote>\n<p>温馨提示: svn的端口号为3690在防火墙和阿里云安全组都要放行呦!!!</p>\n</blockquote>\n\n 						</div>', '2', '1508703007', '2', '351', '1', '0', '1522173973', '1522763010');
INSERT INTO `blog_articles` VALUES ('4', '1', '4', '阿里云香港服务器centos7.3配置vpn', '1', '为了自己翻墙方便,就租了一台阿里云香港的服务器,装的系统是centos7.3,然后自己在网络上找的各种教程,实践并通过自己学过的知识,成功搭建了vpn,下面说说我的步骤吧.1.安装ppp和pptpdsudoyum-yinstallppppptpdiptables//ppp数据链路层协议,pptpdVPN服务类型...', '<div class=\"article-detail-content markdown-body editormd-html-preview\" id=\"content\">\r\n                        	<p>  为了自己翻墙方便,就租了一台阿里云香港的服务器, 装的系统是centos7.3,然后自己在网络上找的各种教程,实践并通过自己学过的知识, 成功搭建了vpn,下面说说我的步骤吧. </p>\r\n<h5 id=\"h5-1-ppp-pptpd\"><a name=\"1. 安装ppp和pptpd\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>1. 安装ppp和pptpd</h5><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo yum </span><span class=\"pun\">-</span><span class=\"pln\">y install ppp pptpd iptables </span><span class=\"com\">//ppp 数据链路层协议,pptpd VPN服务类型之一,iptables 防火墙，用来消息转发</span></code></li></ol></pre><h5 id=\"h5-2-\"><a name=\"2.编辑配置文件\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.编辑配置文件</h5><h6 id=\"h6-2-1-ppp-dns-options-pptpd-ms-dns-8-8-8-8-ms-dns-8-8-4-4\"><a name=\"2.1 配置 ppp DNS信息, 在options.pptpd中更改ms-dns 8.8.8.8为 ms-dns 8.8.4.4\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.1 配置 ppp DNS信息, 在options.pptpd中更改ms-dns 8.8.8.8为 ms-dns 8.8.4.4</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo vim </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">ppp</span><span class=\"pun\">/</span><span class=\"pln\">options</span><span class=\"pun\">.</span><span class=\"pln\">pptpd</span></code></li></ol></pre><h6 id=\"h6-2-2-ppp-vpn-chap-secrets-pptpd-\"><a name=\"2.2 配置 ppp VPN账号和密码, 在chap-secrets中的下面新增 用户格式如: 用户名 pptpd 密码 *\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.2 配置 ppp VPN账号和密码, 在chap-secrets中的下面新增 用户格式如: 用户名 pptpd 密码 *</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo vim </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">ppp</span><span class=\"pun\">/</span><span class=\"pln\">chap</span><span class=\"pun\">-</span><span class=\"pln\">secrets</span></code></li></ol></pre><h6 id=\"h6-2-3-pptpd-localip-192-168-0-1-remoteip-192-168-0-234-238-192-168-0-245\"><a name=\"2.3 配置 pptpd 更改localip 192.168.0.1   remoteip 192.168.0.234-238，192.168.0.245\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.3 配置 pptpd 更改localip 192.168.0.1   remoteip 192.168.0.234-238，192.168.0.245</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo vim </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">pptpd</span><span class=\"pun\">.</span><span class=\"pln\">conf</span></code></li></ol></pre><h6 id=\"h6-2-4-sysctl-conf-net-ipv4-ip_forward-1\"><a name=\"2.4 配置内核支持转发 在sysctl.conf  在末尾增加 net.ipv4.ip_forward=1\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.4 配置内核支持转发 在sysctl.conf  在末尾增加 net.ipv4.ip_forward=1</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo vim </span><span class=\"pun\">/</span><span class=\"pln\">etc</span><span class=\"pun\">/</span><span class=\"pln\">sysctl</span><span class=\"pun\">.</span><span class=\"pln\">conf</span></code></li></ol></pre><h6 id=\"h6-2-4-\"><a name=\"2.4 保存,退出 ,重新加载配置项\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>2.4 保存,退出 ,重新加载配置项</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo sysctl </span><span class=\"pun\">-</span><span class=\"pln\">p</span></code></li></ol></pre><h4 id=\"h4-3-iptables-\"><a name=\"3. 安装iptables服务\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>3. 安装iptables服务</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo yum </span><span class=\"pun\">-</span><span class=\"pln\">y install iptables iptables</span><span class=\"pun\">-</span><span class=\"pln\">services</span></code></li></ol></pre><h4 id=\"h4-4-\"><a name=\"4. 关闭所有的防火墙, 以及阿里云安全组(阿里云安全组需要去阿里云控制台关闭)\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>4. 关闭所有的防火墙, 以及阿里云安全组(阿里云安全组需要去阿里云控制台关闭)</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo systemctl stop  iptables</span><span class=\"pun\">.</span><span class=\"pln\">service</span></code></li><li class=\"L1\"><code><span class=\"pln\">systemctl stop firewalld</span></code></li></ol></pre><blockquote>\r\n<p>温馨提示:pptpd,ppp所涉及到的端口如:1723,47等都必须在防火墙和阿里云安全组中开放</p>\r\n</blockquote>\r\n<h4 id=\"h4-5-pptp\"><a name=\"5. 重启pptp\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>5. 重启pptp</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">systemctl restart  pptpd</span><span class=\"pun\">.</span><span class=\"pln\">service</span></code></li></ol></pre><h4 id=\"h4-6-2-2-vpn-\"><a name=\"6. 根据2.2配置的用户名和密码登陆vpn,这个时候你会发现可以正常登陆,却没有网络, 不要着急,步骤才刚刚走完一大半.\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>6. 根据2.2配置的用户名和密码登陆vpn,这个时候你会发现可以正常登陆,却没有网络, 不要着急,步骤才刚刚走完一大半.</h4><h4 id=\"h4-7-iptables\"><a name=\"7. 配置iptables\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7. 配置iptables</h4><h6 id=\"h6-7-1-\"><a name=\"7.1. 清空防火墙配置:\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7.1. 清空防火墙配置:</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">P INPUT ACCEPT     </span><span class=\"com\"># 改成 ACCEPT 标示接收一切请求</span></code></li><li class=\"L1\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">F                     </span><span class=\"com\"># 清空默认所有规则</span></code></li><li class=\"L2\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">X                     </span><span class=\"com\"># 清空自定义所有规则</span></code></li><li class=\"L3\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">Z                     </span><span class=\"com\"># 计数器置0</span></code></li></ol></pre><h6 id=\"h6-7-2-\"><a name=\"7.2 配置防火墙规则:\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7.2 配置防火墙规则:</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">A INPUT </span><span class=\"pun\">-</span><span class=\"pln\">i lo </span><span class=\"pun\">-</span><span class=\"pln\">j ACCEPT                          </span><span class=\"com\">#允许127.0.0.1访问本地服务</span></code></li><li class=\"L1\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">A INPUT </span><span class=\"pun\">-</span><span class=\"pln\">m state </span><span class=\"pun\">--</span><span class=\"pln\">state ESTABLISHED </span><span class=\"pun\">-</span><span class=\"pln\">j ACCEPT       </span><span class=\"com\"># 允许访问外部服务</span></code></li><li class=\"L2\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">A INPUT </span><span class=\"pun\">-</span><span class=\"pln\">p icmp </span><span class=\"pun\">-</span><span class=\"pln\">m icmp </span><span class=\"pun\">--</span><span class=\"pln\">icmp</span><span class=\"pun\">-</span><span class=\"pln\">type </span><span class=\"lit\">8</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\">j ACCEPT      </span><span class=\"com\"># 允许 ping</span></code></li><li class=\"L3\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">A INPUT </span><span class=\"pun\">-</span><span class=\"pln\">p tcp </span><span class=\"pun\">--</span><span class=\"pln\">dport </span><span class=\"lit\">22</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\">j ACCEPT                  </span><span class=\"com\"># 开启 ssh 端口</span></code></li><li class=\"L4\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">A INPUT </span><span class=\"pun\">-</span><span class=\"pln\">p tcp </span><span class=\"pun\">--</span><span class=\"pln\">dport </span><span class=\"lit\">47</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\">j ACCEPT                  </span><span class=\"com\"># 开启 什么虚拟 端口</span></code></li><li class=\"L5\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">A INPUT </span><span class=\"pun\">-</span><span class=\"pln\">p tcp </span><span class=\"pun\">--</span><span class=\"pln\">dport </span><span class=\"lit\">1723</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\">j ACCEPT                </span><span class=\"com\"># 开启 vpn服务 端口</span></code></li></ol></pre><h6 id=\"h6-7-3-iptables-\"><a name=\"7.3 配置 iptables 转发策略:\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7.3 配置 iptables 转发策略:</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"com\">#有两种转发策略,根据自己的架构选择</span></code></li><li class=\"L1\"><code><span class=\"com\">#第一种 XEN架构,最简单查看是不是这种架构, 就是看自己的服务器有几个网卡,如果有eth1这个网卡就是</span></code></li><li class=\"L2\"><code><span class=\"pln\">sudo iptables </span><span class=\"pun\">-</span><span class=\"pln\">t nat </span><span class=\"pun\">-</span><span class=\"pln\">A POSTROUTING </span><span class=\"pun\">-</span><span class=\"pln\">s </span><span class=\"lit\">192.168</span><span class=\"pun\">.</span><span class=\"lit\">0.0</span><span class=\"pun\">/</span><span class=\"lit\">24</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\">o eth1 </span><span class=\"pun\">-</span><span class=\"pln\">j MASQUERADE</span></code></li><li class=\"L3\"><code><span class=\"com\">#第二种OpenVZ架构:</span></code></li><li class=\"L4\"><code><span class=\"pln\">iptables </span><span class=\"pun\">-</span><span class=\"pln\">t nat </span><span class=\"pun\">-</span><span class=\"pln\">A POSTROUTING </span><span class=\"pun\">-</span><span class=\"pln\">s </span><span class=\"lit\">192.168</span><span class=\"pun\">.</span><span class=\"lit\">0.0</span><span class=\"pun\">/</span><span class=\"lit\">24</span><span class=\"pln\"> </span><span class=\"pun\">-</span><span class=\"pln\">j SNAT </span><span class=\"pun\">--</span><span class=\"pln\">to</span><span class=\"pun\">-</span><span class=\"pln\">source </span><span class=\"pun\">内网</span><span class=\"pln\">ip</span></code></li></ol></pre><h6 id=\"h6-7-4-\"><a name=\"7.4 保存重启\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>7.4 保存重启</h6><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">sudo service iptables save</span></code></li><li class=\"L1\"><code><span class=\"pln\">sudo systemctl restart  iptables</span><span class=\"pun\">.</span><span class=\"pln\">service</span></code></li></ol></pre><h4 id=\"h4-8-iptables-pptpd-\"><a name=\"8. 配置开机启动以及iptables和pptpd重启\" class=\"reference-link\"></a><span class=\"header-link octicon octicon-link\"></span>8. 配置开机启动以及iptables和pptpd重启</h4><pre class=\"prettyprint linenums prettyprinted\" style=\"\"><ol class=\"linenums\"><li class=\"L0\"><code><span class=\"pln\">systemctl enable iptables</span><span class=\"pun\">.</span><span class=\"pln\">service   </span><span class=\"com\"># 开机启动 iptables        </span></code></li><li class=\"L1\"><code><span class=\"pln\">systemctl enable pptpd</span><span class=\"pun\">.</span><span class=\"pln\">service    </span><span class=\"com\"># 开机启动 pptpd            </span></code></li><li class=\"L2\"><code><span class=\"pln\">iptables </span><span class=\"pun\">-</span><span class=\"pln\">P INPUT DROP         </span><span class=\"com\"># 加载防火墙策略</span></code></li><li class=\"L3\"><code><span class=\"pln\">systemctl restart  iptables</span><span class=\"pun\">.</span><span class=\"pln\">service  </span><span class=\"com\"># 重新启动 iptables</span></code></li><li class=\"L4\"><code><span class=\"pln\">systemctl restart  pptpd</span><span class=\"pun\">.</span><span class=\"pln\">service     </span><span class=\"com\"># 重新启动 pptpd      </span></code></li></ol></pre><blockquote>\r\n<p>温馨提示:systemctl list-unit-files | grep enabled 查看开机启动</p>\r\n</blockquote>\r\n<p>  到了这一步,你就可以放心大胆的去登陆你的vpn账户和密码,然后去看看那个自由的世界</p>\r\n\r\n 						</div>', '2', '1508692232', '3', '632', '1', '0', '0', '1523109765');
INSERT INTO `blog_articles` VALUES ('7', '1', '1', 'Fasa', '0', '', '', '2', '1522601250', '0', '0', '0', '1', '1522601250', '1523011086');
INSERT INTO `blog_articles` VALUES ('8', '1', '55', 'C# 高性能 TCP 服务的多种实现方式', '1', '本篇文章的主旨是使用 .NET/C# 实现 TCP 高性能服务的不同方式，包括但不限于如下内容：APM 方式，即 Asynchronous Programming Model\nTAP 方式，即 Task-based Asynchronous Pattern\nSAEA 方式，即 SocketAsyncEventArgs\nRIO 方式，即 Registered I/O', '<p>本篇文章的主旨是使用&nbsp;.NET/C# 实现 TCP 高性能服务的不同方式，包括但不限于如下内容：</p><ul><li><a href=\"http://www.cnblogs.com/gaochundong/p/csharp_tcp_service_models.html#apm\" target=\"_blank\">APM 方式，即 Asynchronous Programming Model</a></li><li><a href=\"http://www.cnblogs.com/gaochundong/p/csharp_tcp_service_models.html#tap\" target=\"_blank\">TAP 方式，即 Task-based Asynchronous Pattern</a></li><li><a href=\"http://www.cnblogs.com/gaochundong/p/csharp_tcp_service_models.html#saea\" target=\"_blank\">SAEA 方式，即 SocketAsyncEventArgs</a></li><li><a href=\"http://www.cnblogs.com/gaochundong/p/csharp_tcp_service_models.html#rio\" target=\"_blank\">RIO 方式，即 Registered I/O</a></li></ul><p>在 .NET/C# 中对于 Socket 的支持均是基于&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/aa365198(v=vs.85).aspx\" target=\"_blank\">Windows I/O Completion Ports</a>&nbsp;完成端口技术的封装，通过不同的 Non-Blocking 封装结构来满足不同的编程需求。以上方式均已在&nbsp;<a href=\"https://github.com/gaochundong/Cowboy\" target=\"_blank\">Cowboy.Sockets</a>&nbsp;中有完整实现，并且 APM 和 TAP 方式已经在实际项目中应用。<a href=\"https://github.com/gaochundong/Cowboy\" target=\"_blank\">Cowboy.Sockets</a>&nbsp;还在不断的进化和完善中，如有任何问题请及时指正。</p><p>虽然有这么多种实现方式，但抽象的看，它们是一样一样的，用两个 Loop 即可描述：<strong>Accept Loop</strong>和&nbsp;<strong>Read Loop</strong>，如下图所示。（这里提及的 \"<strong>Loop</strong>\" 指的是一种<strong>循环方式</strong>，而非特指&nbsp;while/for 等关键字。）</p><p><img src=\"https://images2015.cnblogs.com/blog/175043/201602/175043-20160205113555413-351689793.png\" alt=\"\" width=\"645\" height=\"354\"></p><ul><li>在任何 TCP Server 的实现中，一定存在一个 Accept Socket Loop，用于接收 Client 端的 Connect 请求以建立 TCP Connection。</li><li>在任何 TCP Server 的实现中，一定存在一个 Read Socket Loop，用于接收 Client 端 Write 过来的数据。</li></ul><p>如果 Accept 循环阻塞，则会导致无法快速的建立连接，服务端 Pending Backlog 满，进而导致 Client 端收到 Connect Timeout 的异常。如果 Read 循环阻塞，则显然会导致无法及时收到 Client 端发过来的数据，进而导致 Client 端 Send Buffer 满，无法再发送数据。</p><p>从实现细节的角度看，能够导致服务阻塞的位置可能在：</p><ol><li>Accept 到新的&nbsp;Socket，构建新的 Connection 需要分配各种资源，分配资源慢；</li><li>Accept 到新的&nbsp;Socket，没有及时触发下一次 Accept；</li><li>Read 到新的&nbsp;Buffer，判定&nbsp;Payload&nbsp;消息长度，判定过程长；</li><li>Read 到新的&nbsp;Buffer，发现 Payload 还没有收全，继续 Read，则 \"可能\" 会导致一次 Buffer Copy；</li><li>Payload 接收完毕，进行 De-Serialization 转成可识别的 Protocol Message，反序列化慢；</li><li>由 Business Module 来处理相应的 Protocol Message，处理过程慢；</li></ol><p>1-2 涉及到 Accept 过程和 Connection 的建立过程，3-4 涉及到 ReceiveBuffer 的处理过程，5-6 涉及到应用逻辑侧的实现。</p><p>Java 中著名的 Netty 网络库从 4.0 版本开始对于 Buffer 部分做了全新的尝试，采用了名叫&nbsp;<a href=\"https://github.com/netty/netty/wiki/New-and-noteworthy-in-4.0\" target=\"_blank\">ByteBuf</a>的设计，实现 Buffer Zero Copy 以减少高并发条件下&nbsp;Buffer 拷贝带来的性能损失和 GC 压力。<a href=\"https://github.com/Azure/DotNetty\" target=\"_blank\">DotNetty</a>，<a href=\"https://github.com/dotnet/orleans\" target=\"_blank\">Orleans</a>&nbsp;，<a href=\"https://github.com/helios-io/helios\" target=\"_blank\">Helios</a>&nbsp;等项目正在尝试在 C# 中进行类似的 ByteBuf 的实现。</p><h2><a name=\"apm\"></a>APM 方式：TcpSocketServer</h2><p><a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/APM/TcpSocketServer.cs\" target=\"_blank\">TcpSocketServer</a>&nbsp;的实现是基于 .NET Framework 自带的&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/system.net.sockets.tcplistener(v=vs.110).aspx\" target=\"_blank\">TcpListener</a>&nbsp;和&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/system.net.sockets.tcpclient(v=vs.110).aspx\" target=\"_blank\">TcpClient</a>&nbsp;的更进一步的封装，采用基于 APM 的 BeginXXX 和 EndXXX 接口实现。</p><p>TcpSocketServer&nbsp;中的 Accept Loop 指的就是，</p><ul><li>BeginAccept -&gt; EndAccept-&gt;&nbsp;BeginAccept -&gt; EndAccept&nbsp;-&gt; BeginAccept -&gt; ...</li></ul><p>每一个建立成功的 Connection 由&nbsp;<a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/APM/TcpSocketSession.cs\" target=\"_blank\">TcpSocketSession</a>&nbsp;来处理，所以 TcpSocketSession 中会包含 Read Loop，</p><ul><li>BeginRead -&gt; EndRead -&gt; BeginRead -&gt; EndRead -&gt; BeginRead -&gt; ...</li></ul><p>TcpSocketServer 通过暴露 Event 来实现 Connection 的建立与断开和数据接收的通知。</p><div class=\"cnblogs_code\"><pre>  <span>event</span> EventHandler<tcpclientconnectedeventargs><span> ClientConnected;\n  </span><span>event</span> EventHandler<tcpclientdisconnectedeventargs><span> ClientDisconnected;\n  </span><span>event</span> EventHandler<tcpclientdatareceivedeventargs> ClientDataReceived;</tcpclientdatareceivedeventargs></tcpclientdisconnectedeventargs></tcpclientconnectedeventargs></pre></div><p><span>使用也是简单直接，直接订阅事件通知。</span></p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>private</span> <span>static</span> <span>void</span><span> StartServer()\n  {\n      _server </span>= <span>new</span> TcpSocketServer(<span>22222</span><span>);\n      _server.ClientConnected </span>+=<span> server_ClientConnected;\n      _server.ClientDisconnected </span>+=<span> server_ClientDisconnected;\n      _server.ClientDataReceived </span>+=<span> server_ClientDataReceived;\n      _server.Listen();\n  }\n  \n  </span><span>static</span> <span>void</span> server_ClientConnected(<span>object</span><span> sender, TcpClientConnectedEventArgs e)\n  {\n      Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>TCP client {0} has connected {1}.</span><span>\"</span><span>, e.Session.RemoteEndPoint, e.Session));\n  }\n  \n  </span><span>static</span> <span>void</span> server_ClientDisconnected(<span>object</span><span> sender, TcpClientDisconnectedEventArgs e)\n  {\n      Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>TCP client {0} has disconnected.</span><span>\"</span><span>, e.Session));\n  }\n  \n  </span><span>static</span> <span>void</span> server_ClientDataReceived(<span>object</span><span> sender, TcpClientDataReceivedEventArgs e)\n  {\n      </span><span>var</span> text =<span> Encoding.UTF8.GetString(e.Data, e.DataOffset, e.DataLength);\n      Console.Write(</span><span>string</span>.Format(<span>\"</span><span>Client : {0} {1} --&gt; </span><span>\"</span><span>, e.Session.RemoteEndPoint, e.Session));\n      Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>{0}</span><span>\"</span><span>, text));\n      _server.Broadcast(Encoding.UTF8.GetBytes(text));\n  }</span></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><h2><a name=\"tap\"></a>TAP 方式：AsyncTcpSocketServer</h2><p><a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/TAP/AsyncTcpSocketServer.cs\" target=\"_blank\">AsyncTcpSocketServer</a>&nbsp;的实现是基于 .NET Framework 自带的&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/system.net.sockets.tcplistener(v=vs.110).aspx\" target=\"_blank\">TcpListener</a>&nbsp;和&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/system.net.sockets.tcpclient(v=vs.110).aspx\" target=\"_blank\">TcpClient</a>&nbsp;的更进一步的封装，采用基于 TAP 的 async/await 的 XXXAsync 接口实现。</p><p>然而，实际上&nbsp;<a href=\"http://referencesource.microsoft.com/#System/net/System/Net/Sockets/TCPListener.cs\" target=\"_blank\">XXXAsync</a>&nbsp;并没有创建什么神奇的效果，其内部实现只是将 APM 的方法转换成了 TAP 的调用方式。</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>//</span><span>************* Task-based async public methods *************************</span>\n  [HostProtection(ExternalThreading = <span>true</span><span>)]\n  </span><span>public</span> Task<socket><span> AcceptSocketAsync()\n  {\n      </span><span>return</span> Task<socket>.Factory.FromAsync(BeginAcceptSocket, EndAcceptSocket, <span>null</span><span>);\n  }\n  \n  [HostProtection(ExternalThreading </span>= <span>true</span><span>)]\n  </span><span>public</span> Task<tcpclient><span> AcceptTcpClientAsync()\n  {\n      </span><span>return</span> Task<tcpclient>.Factory.FromAsync(BeginAcceptTcpClient, EndAcceptTcpClient, <span>null</span><span>);\n  }</span></tcpclient></tcpclient></socket></socket></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><p><a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/TAP/AsyncTcpSocketServer.cs\" target=\"_blank\">AsyncTcpSocketServer</a>&nbsp;中的 Accept Loop 指的就是，</p><div class=\"cnblogs_code\"><pre>  <span>while</span><span> (IsListening)\n  {\n      </span><span>var</span> tcpClient = <span>await</span><span> _listener.AcceptTcpClientAsync();\n  }</span></pre></div><p><span>每一个建立成功的 Connection 由&nbsp;<a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/TAP/AsyncTcpSocketSession.cs\" target=\"_blank\">Async</a></span><a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/TAP/AsyncTcpSocketSession.cs\" target=\"_blank\"><span>TcpSocketSession</span></a><span>&nbsp;来处理，所以&nbsp;</span><span>Async</span><span>TcpSocketSession 中会包含 Read Loop，</span></p><div class=\"cnblogs_code\"><pre>  <span>while</span> (State ==<span> TcpSocketConnectionState.Connected)\n  {\n      </span><span>int</span> receiveCount = <span>await</span> _stream.ReadAsync(_receiveBuffer, <span>0</span><span>, _receiveBuffer.Length);\n  }</span></pre></div><p>为了将&nbsp;async/await 异步到底，<a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/TAP/AsyncTcpSocketServer.cs\" target=\"_blank\">AsyncTcpSocketServer</a>&nbsp;所暴露的接口也同样是 Awaitable 的。</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>public</span> <span>interface</span><span> IAsyncTcpSocketServerMessageDispatcher\n  {\n      Task OnSessionStarted(AsyncTcpSocketSession session);\n      Task OnSessionDataReceived(AsyncTcpSocketSession session, </span><span>byte</span>[] data, <span>int</span> offset, <span>int</span><span> count);\n      Task OnSessionClosed(AsyncTcpSocketSession session);\n  }</span></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><p>使用时仅需将一个实现了该接口的对象注入到 AsyncTcpSocketServer 的构造函数中即可。</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>public</span> <span>class</span><span> SimpleMessageDispatcher : IAsyncTcpSocketServerMessageDispatcher\n  {\n      </span><span>public</span> <span>async</span><span> Task OnSessionStarted(AsyncTcpSocketSession session)\n      {\n          Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>TCP session {0} has connected {1}.</span><span>\"</span><span>, session.RemoteEndPoint, session));\n          </span><span>await</span><span> Task.CompletedTask;\n      }\n  \n      </span><span>public</span> <span>async</span> Task OnSessionDataReceived(AsyncTcpSocketSession session, <span>byte</span>[] data, <span>int</span> offset, <span>int</span><span> count)\n      {\n          </span><span>var</span> text =<span> Encoding.UTF8.GetString(data, offset, count);\n          Console.Write(</span><span>string</span>.Format(<span>\"</span><span>Client : {0} --&gt; </span><span>\"</span><span>, session.RemoteEndPoint));\n          Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>{0}</span><span>\"</span><span>, text));\n  \n          </span><span>await</span><span> session.SendAsync(Encoding.UTF8.GetBytes(text));\n      }\n  \n      </span><span>public</span> <span>async</span><span> Task OnSessionClosed(AsyncTcpSocketSession session)\n      {\n          Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>TCP session {0} has disconnected.</span><span>\"</span><span>, session));\n          </span><span>await</span><span> Task.CompletedTask;\n      }\n  }</span></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><p>当然，对于接口的实现也不是强制了，也可以在构造函数中直接注入方法的实现。</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>public</span><span> AsyncTcpSocketServer(\n      IPEndPoint listenedEndPoint,\n      Func</span><asynctcpsocketsession, <span=\"\">byte[], <span>int</span>, <span>int</span>, Task&gt; onSessionDataReceived = <span>null</span><span>,\n      Func</span><asynctcpsocketsession, task=\"\"> onSessionStarted = <span>null</span><span>,\n      Func</span><asynctcpsocketsession, task=\"\"> onSessionClosed = <span>null</span><span>,\n      AsyncTcpSocketServerConfiguration configuration </span>= <span>null</span><span>)\n  {}</span></asynctcpsocketsession,></asynctcpsocketsession,></asynctcpsocketsession,></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><h2><a name=\"saea\"></a>SAEA 方式：TcpSocketSaeaServer</h2><p>SAEA 是&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/system.net.sockets.socketasynceventargs(v=vs.110).aspx\" target=\"_blank\">SocketAsyncEventArgs</a>&nbsp;的简写。SocketAsyncEventArgs&nbsp;是&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/bb968780(v=vs.110).aspx\" target=\"_blank\">.NET Framework 3.5</a>&nbsp;开始支持的一种支持高性能 Socket 通信的实现。SocketAsyncEventArgs 相比于 APM 方式的主要优点可以描述如下：</p><blockquote><p>The main feature of these enhancements is the&nbsp;<strong>avoidance of the repeated allocation and synchronization of objects</strong>&nbsp;during high-volume asynchronous socket I/O. The Begin/End design pattern currently implemented by the Socket class for asynchronous socket I/O requires a System.IAsyncResult object be allocated for each asynchronous socket operation.</p></blockquote><p>也就是说，优点就是无需为每次调用都生成&nbsp;IAsyncResult 等对象，向原生 Socket 更靠近一些。</p><p>使用 SocketAsyncEventArgs 的<a href=\"https://msdn.microsoft.com/en-us/library/bb968780(v=vs.110).aspx\" target=\"_blank\">推荐步骤</a>如下：</p><ol><li>Allocate a new SocketAsyncEventArgs context object, or get a free one from an application pool.</li><li>Set properties on the context object to the operation about to be performed (the callback delegate method and data buffer, for example).</li><li>Call the appropriate socket method (xxxAsync) to initiate the asynchronous operation.</li><li>If the asynchronous socket method (xxxAsync) returns true in the callback, query the context properties for completion status.</li><li>If the asynchronous socket method (xxxAsync) returns false in the callback, the operation completed synchronously. The context properties may be queried for the operation result.</li><li>Reuse the context for another operation, put it back in the pool, or discard it.</li></ol><p>重点在于池化（Pooling），池化的目的就是为了重用和减少运行时分配和垃圾回收的压力。</p><p><a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/SAEA/TcpSocketSaeaServer.cs\" target=\"_blank\">TcpSocketSaeaServer</a>&nbsp;即是对 SocketAsyncEventArgs 的应用和封装，并实现了 Pooling 技术。<a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/SAEA/TcpSocketSaeaServer.cs\" target=\"_blank\">TcpSocketSaeaServer</a>&nbsp;中的重点是 SaeaAwaitable 类，SaeaAwaitable 中内置了一个 SocketAsyncEventArgs，并通过 GetAwaiter 返回 SaeaAwaiter 来支持 async/await 操作。同时，通过 SaeaExtensions 扩展方法对来扩展&nbsp;SocketAsyncEventArgs 的 Awaitable 实现。</p><div class=\"cnblogs_code\"><pre>  <span>public</span> <span>static</span> SaeaAwaitable AcceptAsync(<span>this</span><span> Socket socket, SaeaAwaitable awaitable)\n  </span><span>public</span> <span>static</span> SaeaAwaitable ConnectAsync(<span>this</span><span> Socket socket, SaeaAwaitable awaitable)\n  </span><span>public</span> <span>static</span> SaeaAwaitable DisonnectAsync(<span>this</span><span> Socket socket, SaeaAwaitable awaitable)\n  </span><span>public</span> <span>static</span> SaeaAwaitable ReceiveAsync(<span>this</span><span> Socket socket, SaeaAwaitable awaitable)\n  </span><span>public</span> <span>static</span> SaeaAwaitable SendAsync(<span>this</span> Socket socket, SaeaAwaitable awaitable)</pre></div><p>SaeaPool 则是一个 QueuedObjectPool<saeaawaitable> 的衍生实现，用于池化 SaeaAwaitable 实例。同时，为了减少&nbsp;TcpSocketSaeaSession 的构建过程，也实现了 SessionPool 即&nbsp;QueuedObjectPool<tcpsocketsaeasession>。</tcpsocketsaeasession></saeaawaitable></p><p><a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/SAEA/TcpSocketSaeaServer.cs\" target=\"_blank\">TcpSocketSaeaServer</a>&nbsp;中的 Accept Loop 指的就是，</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>while</span><span> (IsListening)\n  {\n      </span><span>var</span> saea =<span> _acceptSaeaPool.Take();\n  \n      </span><span>var</span> socketError = <span>await</span><span> _listener.AcceptAsync(saea);\n      </span><span>if</span> (socketError ==<span> SocketError.Success)\n      {\n          </span><span>var</span> acceptedSocket =<span> saea.Saea.AcceptSocket;\n      }\n  \n      _acceptSaeaPool.Return(saea);\n  }</span></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><p><span>每一个建立成功的 Connection 由&nbsp;</span><a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/SAEA/TcpSocketSaeaSession.cs\" target=\"_blank\">TcpSocketSaeaSession</a><span>&nbsp;来处理，所以&nbsp;</span><span>TcpSocketSaeaSession</span><span>&nbsp;中会包含 Read Loop，</span></p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>var</span> saea =<span> _saeaPool.Take();\n  saea.Saea.SetBuffer(_receiveBuffer, </span><span>0</span><span>, _receiveBuffer.Length);\n  \n  </span><span>while</span> (State ==<span> TcpSocketConnectionState.Connected)\n  {\n      saea.Saea.SetBuffer(</span><span>0</span><span>, _receiveBuffer.Length);\n  \n      </span><span>var</span> socketError = <span>await</span><span> _socket.ReceiveAsync(saea);\n      </span><span>if</span> (socketError !=<span> SocketError.Success)\n          </span><span>break</span><span>;\n  \n      </span><span>var</span> receiveCount =<span> saea.Saea.BytesTransferred;\n      </span><span>if</span> (receiveCount == <span>0</span><span>)\n          </span><span>break</span><span>;\n  }</span></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><p>同样，<a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/SAEA/TcpSocketSaeaServer.cs\" target=\"_blank\">TcpSocketSaeaServer</a>&nbsp;对外所暴露的接口也同样是 Awaitable 的。</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>public</span> <span>interface</span><span> ITcpSocketSaeaServerMessageDispatcher\n  {\n      Task OnSessionStarted(TcpSocketSaeaSession session);\n      Task OnSessionDataReceived(TcpSocketSaeaSession session, </span><span>byte</span>[] data, <span>int</span> offset, <span>int</span><span> count);\n      Task OnSessionClosed(TcpSocketSaeaSession session);\n  }</span></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><p>使用起来也是简单直接：</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>public</span> <span>class</span><span> SimpleMessageDispatcher : ITcpSocketSaeaServerMessageDispatcher\n  {\n      </span><span>public</span> <span>async</span><span> Task OnSessionStarted(TcpSocketSaeaSession session)\n      {\n          Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>TCP session {0} has connected {1}.</span><span>\"</span><span>, session.RemoteEndPoint, session));\n          </span><span>await</span><span> Task.CompletedTask;\n      }\n  \n      </span><span>public</span> <span>async</span> Task OnSessionDataReceived(TcpSocketSaeaSession session, <span>byte</span>[] data, <span>int</span> offset, <span>int</span><span> count)\n      {\n          </span><span>var</span> text =<span> Encoding.UTF8.GetString(data, offset, count);\n          Console.Write(</span><span>string</span>.Format(<span>\"</span><span>Client : {0} --&gt; </span><span>\"</span><span>, session.RemoteEndPoint));\n          Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>{0}</span><span>\"</span><span>, text));\n  \n          </span><span>await</span><span> session.SendAsync(Encoding.UTF8.GetBytes(text));\n      }\n  \n      </span><span>public</span> <span>async</span><span> Task OnSessionClosed(TcpSocketSaeaSession session)\n      {\n          Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>TCP session {0} has disconnected.</span><span>\"</span><span>, session));\n          </span><span>await</span><span> Task.CompletedTask;\n      }\n  }</span></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><h2><a name=\"rio\"></a>RIO 方式：TcpSocketRioServer</h2><p>从 Windows 8.1 / Windows Server 2012 R2 开始，微软推出了&nbsp;<a href=\"https://msdn.microsoft.com/library/windows/desktop/ms740642(v=vs.85).aspx\" target=\"_blank\">Registered I/O Networking Extensions</a>&nbsp;来支持高性能 Socket 服务的实现，简称 RIO。</p><p><em>The following functions are supported for Windows Store apps on Windows 8.1, Windows Server 2012 R2, and later. Microsoft Visual Studio 2013 Update 3 or later is required for Windows Store apps.</em></p><ul><li><em>RIOCloseCompletionQueue</em></li><li><em>RIOCreateCompletionQueue</em></li><li><em>RIOCreateRequestQueue</em></li><li><em>RIODequeueCompletion</em></li><li><em>RIODeregisterBuffer</em></li><li><em>RIONotify</em></li><li><em>RIOReceive</em></li><li><em>RIOReceiveEx</em></li><li><em>RIORegisterBuffer</em></li><li><em>RIOResizeCompletionQueue</em></li><li><em>RIOResizeRequestQueue</em></li><li><em>RIOSend</em></li><li><em>RIOSendEx</em></li></ul><p>到目前为止，.NET Framework 还没有推出对 RIO 的支持，所以若想在 C# 中实现 RIO 则只能通过 P/Invoke 方式，<a href=\"https://github.com/aL3891/RioSharp\" target=\"_blank\">RioSharp</a>&nbsp;是开源项目中的一个比较完整的实现。</p><p><a href=\"https://github.com/gaochundong/Cowboy\" target=\"_blank\">Cowboy.Sockets</a>&nbsp;直接引用了&nbsp;<a href=\"https://github.com/aL3891/RioSharp\" target=\"_blank\">RioSharp</a>&nbsp;的源代码，放置在&nbsp;<strong>Cowboy.Sockets.Experimental</strong>&nbsp;名空间下，以供实验和测试使用。</p><p>同样，通过&nbsp;<a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/RIO/TcpSocketRioServer.cs\" target=\"_blank\">TcpSocketRioServer</a>&nbsp;来实现 Accept Loop，</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>_listener.OnAccepted = (acceptedSocket) =&gt;<span>\n{\n    Task.Run(</span><span>async</span> () =&gt;<span>\n    {\n        </span><span>await</span><span> Process(acceptedSocket);\n    })\n    .Forget();\n};</span></pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><p>通过&nbsp;<a href=\"https://github.com/gaochundong/Cowboy/blob/master/Cowboy/Cowboy.Sockets/Tcp/Server/RIO/TcpSocketRioSession.cs\" target=\"_blank\">TcpSocketRioSession</a>&nbsp;来处理 Read Loop，</p><div class=\"cnblogs_code\"><pre>  <span>while</span> (State ==<span> TcpSocketConnectionState.Connected)\n  {\n      </span><span>int</span> receiveCount = <span>await</span> _stream.ReadAsync(_receiveBuffer, <span>0</span><span>, _receiveBuffer.Length);\n      </span><span>if</span> (receiveCount == <span>0</span><span>)\n          </span><span>break</span><span>;\n  }</span></pre></div><p>测试代码一如既往的类似：</p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>  <span>public</span> <span>class</span><span> SimpleMessageDispatcher : ITcpSocketRioServerMessageDispatcher\n  {\n      </span><span>public</span> <span>async</span><span> Task OnSessionStarted(TcpSocketRioSession session)\n      {\n          </span><span>//</span><span>Console.WriteLine(string.Format(\"TCP session {0} has connected {1}.\", session.RemoteEndPoint, session));</span>\n          Console.WriteLine(<span>string</span>.Format(<span>\"</span><span>TCP session has connected {0}.</span><span>\"</span><span>, session));\n          </span><span>await</span><span> Task.CompletedTask;\n      }\n  \n      </span><span>public</span> <span>async</span> Task OnSessionDataReceived(TcpSocketRioSession session, <span>byte</span>[] data, <span>int</span> offset, <span>int</span><span> count)\n      {\n          </span><span>var</span> text =<span> Encoding.UTF8.GetString(data, offset, count);\n          </span><span>//</span><span>Console.Write(string.Format(\"Client : {0} --&gt; \", session.RemoteEndPoint));</span>\n          Console.Write(<span>string</span>.Format(<span>\"</span><span>Client : --&gt; </span><span>\"</span><span>));\n          Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>{0}</span><span>\"</span><span>, text));\n  \n          </span><span>await</span><span> session.SendAsync(Encoding.UTF8.GetBytes(text));\n      }\n  \n      </span><span>public</span> <span>async</span><span> Task OnSessionClosed(TcpSocketRioSession session)\n      {\n          Console.WriteLine(</span><span>string</span>.Format(<span>\"</span><span>TCP session {0} has disconnected.</span><span>\"</span><span>, session));\n          </span><span>await</span><span> Task.CompletedTask;\n      }\n  }</span></pre></div><p><code class=\"csharp comments\"><br></code></p>', '0', '1522762478', '3', '11', '0', '0', '1522762479', '1523389796');
INSERT INTO `blog_articles` VALUES ('9', '1', '84', '聚类算法-K均值(K-means)', '1', ' 在前面的文章中，介绍了三种常见的分类算法。分类作为一种监督学习方法，要求必须事先明确知道各个类别的信息，并且断言所有待分类项都有一个类别与之对应。但是很多时候上述条件得不到满足，尤其是在处理海量数据的时候，如果通过预处理使得数据满足分类算法的要求，则代价非常大，这时候可以考虑使用聚类算法。聚类属于无监督学习，相比于分类，聚类不依赖预定义的类和类标号的训练实例。本文首先介绍聚类的基础&mdash;&mdash;距离与相异度，然后介绍一种常见的聚类算法&mdash;&mdash;k均值和k中心点聚类.', '<h1>摘要</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在前面的文章中，介绍了三种常见的分类算法。分类作为一种监督学习方法，要求必须事先明确知道各个类别的信息，并且断言所有待分类项都有一个类别与之对应。但是很多时候上述条件得不到满足，尤其是在处理海量数据的时候，如果通过预处理使得数据满足分类算法的要求，则代价非常大，这时候可以考虑使用聚类算法。聚类属于无监督学习，相比于分类，聚类不依赖预定义的类和类标号的训练实例。本文首先介绍聚类的基础——距离与相异度，然后介绍一种常见的聚类算法——k均值和k中心点聚类，最后会举一个实例：应用聚类方法试图解决一个在体育界大家颇具争议的问题——中国男足近几年在亚洲到底处于几流水平。</p><h1><a name=\"t1\"></a>相异度计算</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在正式讨论聚类前，我们要先弄清楚一个问题：如何定量计算两个可比较元素间的相异度。用通俗的话说，相异度就是两个东西差别有多大，例如人类与章鱼的相异度明显大于人类与黑猩猩的相异度，这是能我们直观感受到的。但是，计算机没有这种直观感受能力，我们必须对相异度在数学上进行定量定义。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span><span>设<img title=\"X=\\{x_1,x_2,...,x_n\\},Y=\\{y_1,y_2,...,y_n\\}\" src=\"http://latex.codecogs.com/gif.latex?X=%5C%7Bx_1,x_2,...,x_n%5C%7D,Y=%5C%7By_1,y_2,...,y_n%5C%7D\" alt=\"\">，其中X，Y是两个元素项，各自具有n个可度量特征属性，那么X和Y的相异度定义为：<img title=\"d(X,Y)=f(X,Y) \\to R\" src=\"http://latex.codecogs.com/gif.latex?d(X,Y)=f(X,Y)%20%5Cto%20R\" alt=\"\">，其中R为实数域。</span></span>也就是说相异度是两个元素对实数域的一个映射，所映射的实数定量表示两个元素的相异度。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面介绍不同类型变量相异度计算方法。</p><h2><a name=\"t2\"></a>标量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 标量也就是无方向意义的数字，也叫标度变量。现在先考虑元素的所有特征属性都是标量的情况。例如，计算X={2,1,102}和Y={1,3,2}的相异度。一种很自然的想法是用两者的欧几里得距离来作为相异度，欧几里得距离的定义如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img title=\"d(X,Y)=\\sqrt{(x_1-y_1)^2+(x_2-y_2)^2+...+(x_n-y_n)^2}\" src=\"http://latex.codecogs.com/gif.latex?d(X,Y)=%5Csqrt%7B(x_1-y_1)%5E2+(x_2-y_2)%5E2+...+(x_n-y_n)%5E2%7D\" alt=\"\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其意义就是两个元素在欧氏空间中的集合距离，因为其直观易懂且可解释性强，被广泛用于标识两个标量元素的相异度。将上面两个示例数据代入公式，可得两者的欧氏距离为：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img title=\"d(X,Y)=\\sqrt{(2-1)^2+(1-3)^2+(102-2)^2}=100.025\" src=\"http://latex.codecogs.com/gif.latex?d(X,Y)=%5Csqrt%7B(2-1)%5E2+(1-3)%5E2+(102-2)%5E2%7D=100.025\" alt=\"\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 除欧氏距离外，常用作度量标量相异度的还有曼哈顿距离和闵可夫斯基距离，两者定义如下：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 曼哈顿距离：<img title=\"d(X,Y)=|x_1-y_1|+|x_2-y_2|+...+|x_n-y_n|\" src=\"http://latex.codecogs.com/gif.latex?d(X,Y)=%7Cx_1-y_1%7C+%7Cx_2-y_2%7C+...+%7Cx_n-y_n%7C\" alt=\"\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 闵可夫斯基距离：<img title=\"d(X,Y)=\\sqrt[p]{(x_1-y_1)^p+(x_2-y_2)^p+...+(x_n-y_n)^p}\" src=\"http://latex.codecogs.com/gif.latex?d(X,Y)=%5Csqrt%5Bp%5D%7B%7Cx_1-y_1%7C%5Ep+%7Cx_2-y_2%7C%5Ep+...+%7Cx_n-y_n%7C%5Ep%7D\" alt=\"\" width=\"410\" height=\"24\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 欧氏距离和曼哈顿距离可以看做是闵可夫斯基距离在p=2和p=1下的特例。另外这三种距离都可以加权，这个很容易理解，不再赘述。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面要说一下标量的规格化问题。上面这样计算相异度的方式有一点问题，就是<span>取值范围大的属性对距离的影响高于取值范围小的属性</span>。例如上述例子中第三个属性的取值跨度远大于前两个，这样不利于真实反映真实的相异度，为了解决这个问题，一般要对属性值进行规格化。所谓规格化就是将各个属性值按比例映射到相同的取值区间，这样是为了平衡各个属性对距离的影响。通常将各个属性均映射到[0,1]区间，映射公式为：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img title=\"{a}\'_i=\\frac{a_i-min(a_i)}{max(a_i)-min(a_i)}\" src=\"http://latex.codecogs.com/gif.latex?%7Ba%7D%27_i=%5Cfrac%7Ba_i-min(a_i)%7D%7Bmax(a_i)-min(a_i)%7D\" alt=\"\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其中max(ai)和min(ai)表示所有元素项中第i个属性的最大值和最小值。例如，将示例中的元素规格化到[0,1]区间后，就变成了X’={1,0,1}，Y’={0,1,0}，重新计算欧氏距离约为1.732。</p><h2><a name=\"t3\"></a>二元变量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 所谓二元变量是只能取0和1两种值变量，有点类似布尔值，通常用来标识是或不是这种二值属性。对于二元变量，上一节提到的距离不能很好标识其相异度，我们需要一种更适合的标识。一种常用的方法是用元素相同序位同值属性的比例来标识其相异度。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 设有X={1,0,0,0,1,0,1,1}，Y={0,0,0,1,1,1,1,1}，可以看到，两个元素第2、3、5、7和8个属性取值相同，而第1、4和6个取值不同，那么相异度可以标识为3/8=0.375。一般的，对于二元变量，相异度可用“<span><span>取值不同的同位属性数/单个元素的属性位数</span></span>”标识。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 上面所说的相异度应该叫做对称二元相异度。现实中还有一种情况，就是我们只关心两者都取1的情况，而认为两者都取0的属性并不意味着两者更相似。例如在根据病情对病人聚类时，如果两个人都患有肺癌，我们认为两个人增强了相似度，但如果两个人都没患肺癌，并不觉得这加强了两人的相似性，在这种情况下，改用“<span><span>取值不同的同位属性数/(单个元素的属性位数-同取0的位数)</span></span>”来标识相异度，这叫做非对称二元相异度。如果用1减去非对称二元相异度，则得到非对称二元相似度，也叫Jaccard系数，是一个非常重要的概念。</p><h2><a name=\"t4\"></a>分类变量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 分类变量是二元变量的推广，类似于程序中的枚举变量，但各个值没有数字或序数意义，如颜色、民族等等，对于分类变量，用“<span><span>取值不同的同位属性数/单个元素的全部属性数</span></span>”来标识其相异度。</p><h2><a name=\"t5\"></a>序数变量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 序数变量是具有序数意义的分类变量，通常可以按照一定顺序意义排列，如冠军、亚军和季军。对于序数变量，一般为每个值分配一个数，叫做这个值的秩，然后以秩代替原值当做标量属性计算相异度。</p><h2><a name=\"t6\"></a>向量</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于向量，由于它不仅有大小而且有方向，所以闵可夫斯基距离不是度量其相异度的好办法，一种流行的做法是用两个向量的余弦度量，其度量公式为：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<img title=\"s(X,Y)=\\frac{X^tY}{||X||||Y||}\" src=\"http://latex.codecogs.com/gif.latex?s(X,Y)=%5Cfrac%7BX%5EtY%7D%7B%7C%7CX%7C%7C%7C%7CY%7C%7C%7D\" alt=\"\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其中||X||表示X的欧几里得范数。要注意，<span><span>余弦度量度量的不是两者的相异度，而是相似度！</span></span></p><h1><a name=\"t7\"></a>聚类问题</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在讨论完了相异度计算的问题，就可以正式定义聚类问题了。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span><span>所谓聚类问题，就是给定一个元素集合D，其中每个元素具有n个可观察属性，使用某种算法将D划分成k个子集，要求每个子集内部的元素之间相异度尽可能低，而不同子集的元素相异度尽可能高。其中每个子集叫做一个簇。</span></span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 与分类不同，分类是示例式学习，要求分类前明确各个类别，并断言每个元素映射到一个类别，而聚类是观察式学习，在聚类前可以不知道类别甚至不给定类别数量，是无监督学习的一种。目前聚类广泛应用于统计学、生物学、数据库技术和市场营销等领域，相应的算法也非常的多。本文仅介绍一种最简单的聚类算法——k均值（k-means）算法。</p><h1><a name=\"t8\"></a>K-means算法及其示例</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; k均值算法的计算过程非常直观：</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1、从D中随机取k个元素，作为k个簇的各自的中心。</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2、分别计算剩下的元素到k个簇中心的相异度，将这些元素分别划归到相异度最低的簇。</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3、根据聚类结果，重新计算k个簇各自的中心，计算方法是取簇中所有元素各自维度的算术平均数。</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 4、将D中全部元素按照新的中心重新聚类。</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5、重复第4步，直到聚类结果不再变化。</span></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6、将结果输出。</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 由于算法比较直观，没有什么可以过多讲解的。下面，我们来看看k-means算法一个有趣的应用示例：中国男足近几年到底在亚洲处于几流水平？</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 今年中国男足可算是杯具到家了，几乎到了过街老鼠人人喊打的地步。对于目前中国男足在亚洲的地位，各方也是各执一词，有人说中国男足亚洲二流，有人说三流，还有人说根本不入流，更有人说其实不比日韩差多少，是亚洲一流。既然争论不能解决问题，我们就让数据告诉我们结果吧。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下图是我采集的亚洲15只球队在2005年-2010年间大型杯赛的战绩（由于澳大利亚是后来加入亚足联的，所以这里没有收录）。</p><p><img src=\"https://images.cnblogs.com/cnblogs_com/leoo2sk/WindowsLiveWriter/kkKmeansandderivatives_B926/1_3.png\" border=\"0\" alt=\"\" width=\"635\" height=\"330\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其中包括两次世界杯和一次亚洲杯。我提前对数据做了如下预处理：对于世界杯，进入决赛圈则取其最终排名，没有进入决赛圈的，打入预选赛十强赛赋予40，预选赛小组未出线的赋予50。对于亚洲杯，前四名取其排名，八强赋予5，十六强赋予9，预选赛没出现的赋予17。这样做是为了使得所有数据变为标量，便于后续聚类。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面先对数据进行[0,1]规格化，下面是规格化后的数据：</p><p><img src=\"https://images.cnblogs.com/cnblogs_com/leoo2sk/WindowsLiveWriter/kkKmeansandderivatives_B926/2_3.png\" border=\"0\" alt=\"\" width=\"629\" height=\"327\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 接着用k-means算法进行聚类。设k=3，即将这15支球队分成三个集团。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 现抽取日本、巴林和泰国的值作为三个簇的种子，即初始化三个簇的中心为A：{0.3, 0, 0.19}，B：{0.7, 0.76, 0.5}和C：{1, 1, 0.5}。下面，计算所有球队分别对三个中心点的相异度，这里以欧氏距离度量。下面是我用程序求取的结果：</p><p><img src=\"https://images.cnblogs.com/cnblogs_com/leoo2sk/WindowsLiveWriter/kkKmeansandderivatives_B926/3_3.png\" border=\"0\" alt=\"\" width=\"409\" height=\"341\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 从做到右依次表示各支球队到当前中心点的欧氏距离，将每支球队分到最近的簇，可对各支球队做如下聚类：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 中国C，日本A，韩国A，伊朗A，沙特A，伊拉克C，卡塔尔C，阿联酋C，乌兹别克斯坦B，泰国C，越南C，阿曼C，巴林B，朝鲜B，印尼C。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一次聚类结果：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A：日本，韩国，伊朗，沙特；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; B：乌兹别克斯坦，巴林，朝鲜；</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C：中国，伊拉克，卡塔尔，阿联酋，泰国，越南，阿曼，印尼。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面根据第一次聚类结果，调整各个簇的中心点。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; A簇的新中心点为：{(0.3+0+0.24+0.3)/4=0.21, (0+0.15+0.76+0.76)/4=0.4175, (0.19+0.13+0.25+0.06)/4=0.1575} = {0.21, 0.4175, 0.1575}</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用同样的方法计算得到B和C簇的新中心点分别为{0.7, 0.7333, 0.4167}，{1, 0.94, 0.40625}。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用调整后的中心点再次进行聚类，得到：</p><p><img src=\"https://images.cnblogs.com/cnblogs_com/leoo2sk/WindowsLiveWriter/kkKmeansandderivatives_B926/4_3.png\" border=\"0\" alt=\"\" width=\"522\" height=\"356\"></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第二次迭代后的结果为：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 中国C，日本A，韩国A，伊朗A，沙特A，伊拉克C，卡塔尔C，阿联酋C，乌兹别克斯坦B，泰国C，越南C，阿曼C，巴林B，朝鲜B，印尼C。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 结果无变化，说明结果已收敛，于是给出最终聚类结果：</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 亚洲一流：日本，韩国，伊朗，沙特</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 亚洲二流：乌兹别克斯坦，巴林，朝鲜</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 亚洲三流：中国，伊拉克，卡塔尔，阿联酋，泰国，越南，阿曼，印尼</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 看来数据告诉我们，说国足近几年处在亚洲三流水平真的是没有冤枉他们，至少从国际杯赛战绩是这样的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 其实上面的分析数据不仅告诉了我们聚类信息，还提供了一些其它有趣的信息，例如从中可以定量分析出各个球队之间的差距，例如，在亚洲一流队伍中，日本与沙特水平最接近，而伊朗则相距他们较远，这也和近几年伊朗没落的实际相符。另外，乌兹别克斯坦和巴林虽然没有打进近两届世界杯，不过凭借预算赛和亚洲杯上的出色表现占据B组一席之地，而朝鲜由于打入了2010世界杯决赛圈而有幸进入B组，可是同样奇迹般夺得2007年亚洲杯的伊拉克却被分在三流，看来亚洲杯冠军的分量还不如打进世界杯决赛圈重啊。其它有趣的信息，有兴趣的朋友可以进一步挖掘。</p><p>原文地址：<a target=\"_blank\" href=\"https://www.cnblogs.com/leoo2sk/archive/2010/09/20/k-means.html\">https://www.cnblogs.com/leoo2sk/archive/2010/09/20/k-means.html</a></p>', '0', '1523386084', '0', '0', '0', '0', '1523386084', '1523389782');
INSERT INTO `blog_articles` VALUES ('10', '1', '85', 'docker 的安装以及简单centos镜像制作、启动', '2', 'docker 的安装以及简单centos镜像制作、启动', '<p style=\"text-align: justify;\">1.安装docker</p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ ~]# yum install docker</span><br></p><p style=\"text-align: justify;\"><span>2.查看 docker 是否成功</span></p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ ~]# docker</span></p><p style=\"text-align: justify;\"><span>会显示相关的docker命令</span></p><p style=\"text-align: justify;\"><span>3.宿主机 /data下载好tomcat和jdk</span></p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ data]# ll<br>total 194628<br>-rw-r--r-- 1 root root &nbsp; 9532698 Mar &nbsp;5 21:50 apache-tomcat-8.5.29.tar.gz<br>-rw-r--r-- 1 root root 189756259 Dec 21 03:10 jdk-8u161-linux-x64.tar.gz?AuthParam=1522988861_96ffdef6b5315866dc4e0e7fcc908849<br>[root@iZ2ze82p1dogve7neb5tuoZ data]#&nbsp;</span><br></p><p style=\"text-align: justify;\">4.启动docker容器，并挂载 目录到docker容器内</p><p style=\"text-align: justify;\">启动容器：</p><p style=\"text-align: justify;\">[root@iZ2ze82p1dogve7neb5tuoZ data]# docker run &nbsp;-i -t -v &nbsp;/data:/mnt/software &nbsp;2d194b392dd1 /bin/bash</p><p style=\"text-align: justify;\"><span>进入 容器：</span></p><p style=\"text-align: justify;\"><span>[</span><span><span>root@cece81dcd1b2&nbsp;</span></span><span>/]# ll<br>total 56<br>-rw-r--r-- &nbsp;1 root root 11976 Mar &nbsp;2 01:07 anaconda-post.log<br>lrwxrwxrwx &nbsp;1 root root &nbsp; &nbsp; 7 Mar &nbsp;2 01:06 bin -&gt; usr/bin<br>drwxr-xr-x &nbsp;5 root root &nbsp; 360 Apr &nbsp;6 04:50 dev<br>drwxr-xr-x &nbsp;1 root root &nbsp;4096 Apr &nbsp;6 04:50 etc<br>drwxr-xr-x &nbsp;2 root root &nbsp;4096 Nov &nbsp;5 &nbsp;2016 home<br>lrwxrwxrwx &nbsp;1 root root &nbsp; &nbsp; 7 Mar &nbsp;2 01:06 lib -&gt; usr/lib<br>lrwxrwxrwx &nbsp;1 root root &nbsp; &nbsp; 9 Mar &nbsp;2 01:06 lib64 -&gt; usr/lib64<br>drwxr-xr-x &nbsp;2 root root &nbsp;4096 Nov &nbsp;5 &nbsp;2016 media<br>drwxr-xr-x &nbsp;1 root root &nbsp;4096 Apr &nbsp;6 04:50 mnt<br>drwxr-xr-x &nbsp;2 root root &nbsp;4096 Nov &nbsp;5 &nbsp;2016 opt<br>dr-xr-xr-x 84 root root &nbsp; &nbsp; 0 Apr &nbsp;6 04:50 proc<br>dr-xr-x--- &nbsp;2 root root &nbsp;4096 Mar &nbsp;2 01:07 root<br>drwxr-xr-x &nbsp;1 root root &nbsp;4096 Apr &nbsp;6 04:50 run<br>lrwxrwxrwx &nbsp;1 root root &nbsp; &nbsp; 8 Mar &nbsp;2 01:06 sbin -&gt; usr/sbin<br>drwxr-xr-x &nbsp;2 root root &nbsp;4096 Nov &nbsp;5 &nbsp;2016 srv<br>dr-xr-xr-x 13 root root &nbsp; &nbsp; 0 Apr &nbsp;6 04:50 sys<br>drwxrwxrwt &nbsp;7 root root &nbsp;4096 Mar &nbsp;2 01:07 tmp<br>drwxr-xr-x 13 root root &nbsp;4096 Mar &nbsp;2 01:06 usr<br></span></p><p style=\"text-align: justify;\"><span>drwxr-xr-x 18 root root &nbsp;4096 Mar &nbsp;2 01:07 var</span></p><p style=\"text-align: justify;\"><span>查看挂载点：</span></p><p style=\"text-align: justify;\"><span><span><span>[root@cece81dcd1b2 /]# &nbsp;ll &nbsp;/mnt/software &nbsp;&nbsp;</span><br><span>total 194628</span><br><span>-rw-r--r-- 1 root root &nbsp; 9532698 Mar &nbsp;5 13:50 apache-tomcat-8.5.29.tar.gz</span><br><span>-rw-r--r-- 1 root root 189756259 Dec 20 19:10 jdk-8u161-linux-x64.tar.gz?AuthParam=1522988861_96ffdef6b5315866dc4e0e7fcc908849</span><br></span></span></p><p style=\"text-align: justify;\"><span><span>[root@cece81dcd1b2 /]#&nbsp;</span></span></p><p style=\"text-align: justify;\"><span><span>宿主机的/data 中的数据都可使用</span></span></p><p style=\"text-align: justify;\"><span>5. 解压 jdk和tomcat 分别到/usr/local/jdk和/usr/local/tomcat</span></p><p style=\"text-align: justify;\">在usr/local中分别创建jdk和tomcat</p><p style=\"text-align: justify;\"><span>[root@cece81dcd1b2 local]# mkdir &nbsp;jdk tomcat<br>[root@cece81dcd1b2 local]# ll<br>total 48<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 bin<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 etc<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 games<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 include<br>drwxr-xr-x 2 root root 4096 Apr &nbsp;6 04:57 jdk<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 lib<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 lib64<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 libexec<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 sbin<br>drwxr-xr-x 5 root root 4096 Mar &nbsp;2 01:06 share<br>drwxr-xr-x 2 root root 4096 Nov &nbsp;5 &nbsp;2016 src<br>drwxr-xr-x 2 root root 4096 Apr &nbsp;6 04:57 tomcat<br>[root@cece81dcd1b2 local]#&nbsp;</span></p><p style=\"text-align: justify;\">解压jdk：</p><p style=\"text-align: justify;\"><span>[root@cece81dcd1b2 jdk]# tar -zxvf /mnt/software/jdk-8u161-linux-x64.tar.gz\\?AuthParam\\=1522988861_96ffdef6b5315866dc4e0e7fcc908849&nbsp;</span><br></p><p style=\"text-align: justify;\"><span><span>解压tomcat：</span></span></p><p style=\"text-align: justify;\"><span><span>[root@cece81dcd1b2 tomcat]# tar -zxvf /mnt/software/apache-tomcat-8.5.29.tar.gz&nbsp;<br></span></span></p><p style=\"text-align: justify;\">6. 配置jdk环境变量</p><p style=\"text-align: justify;\"></p><p style=\"text-align: justify;\"><span><span>[root@cece81dcd1b2 etc]# vi /etc/profile<br></span></span></p><p style=\"text-align: justify;\"><span><span>把下面的路径添加到最后：</span></span></p><p style=\"text-align: justify;\"><span><span>#config jdk environment &nbsp;path</span></span></p><p style=\"text-align: justify;\"><span>export JAVA_HOME=/usr/local/jdk/jdk1.8.0_161</span></p><p style=\"text-align: justify;\"><span>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span></p><p style=\"text-align: justify;\"><span>export PATH=$JAVA_HOME/bin:$PATH</span></p><p style=\"text-align: justify;\"><span>查看 jdk 安装</span></p><p style=\"text-align: justify;\"><span>[root@cece81dcd1b2 /]# java -version<br>java version \"1.8.0_161\"<br>Java(TM) SE Runtime Environment (build 1.8.0_161-b12)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)<br>[root@cece81dcd1b2 /]#&nbsp;</span></p><p style=\"text-align: justify;\"><span><br></span></p><p style=\"text-align: justify;\"><span>7.退出容器</span></p><p style=\"text-align: justify;\">exit</p><p style=\"text-align: justify;\">8.查看刚才进入的容器</p><p style=\"text-align: justify;\"><span><span>[root@iZ2ze82p1dogve7neb5tuoZ /]# docker ps -a</span><br><span>CONTAINER ID &nbsp; &nbsp; &nbsp; &nbsp;IMAGE &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMMAND &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CREATED &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STATUS &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PORTS &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; NAMES</span><br><span><span>cece81dcd1b2 &nbsp; &nbsp; &nbsp; &nbsp;</span>2d194b392dd1 &nbsp; &nbsp; &nbsp; &nbsp;\"/bin/bash\" &nbsp; &nbsp; &nbsp; &nbsp; 43 minutes ago &nbsp; &nbsp; &nbsp;Exited (1) About a minute ago &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; reverent_lovelace</span><br></span></p><p style=\"text-align: justify;\"><span>9621dbb1999e &nbsp; &nbsp; &nbsp; &nbsp;516082cd94fa &nbsp; &nbsp; &nbsp; &nbsp;\"catalina.sh run\" &nbsp; 39 hours ago &nbsp; &nbsp; &nbsp; &nbsp;Exited (143) 5 seconds ago &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;competent_shockley</span></p><p style=\"text-align: justify;\"><span>9.根据某个容器id，创建新的镜像</span></p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ /]# docker &nbsp;commit cece81dcd1b2 &nbsp;javaweb:1.0<br>sha256:473aa6b18d586d5c8258171d7bb3c84b1980c7f4b6dc64afd1aed5e985cb2b23<br></span></p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ /]#&nbsp;</span></p><p style=\"text-align: justify;\"><span><span>cece81dcd1b2 &nbsp;:容器id</span><br></span></p><p style=\"text-align: justify;\"><span>&nbsp;javaweb:1.0：新的镜像名</span></p><p style=\"text-align: justify;\"></p><p style=\"text-align: justify;\"><span>查看镜像：</span></p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ /]# docker images</span></p><p style=\"text-align: justify;\"><span>REPOSITORY &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TAG &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IMAGE ID &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;CREATED &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;SIZE</span></p><p><span>javaweb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.0 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 473aa6b18d58 &nbsp; &nbsp; &nbsp; &nbsp;About a minute ago &nbsp; 613 MB<br>docker.io/tomcat &nbsp; &nbsp;latest &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;516082cd94fa &nbsp; &nbsp; &nbsp; &nbsp;2 weeks ago &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;547 MB<br>docker.io/centos &nbsp; &nbsp;latest &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2d194b392dd1 &nbsp; &nbsp; &nbsp; &nbsp;4 weeks ago &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;195 MB<br></span></p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ /]#&nbsp;</span></p><p style=\"text-align: justify;\"><span>10.启动创建新的容器</span></p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ /]# docker run -i -t -p 8080:8080 --name javaweb &nbsp;473aa6b18d58 &nbsp;/bin/bash</span></p><p style=\"text-align: justify;\"><span>-i：交互模式</span></p><p style=\"text-align: justify;\"><span>-t：进入命令模式</span></p><p style=\"text-align: justify;\"><span>-p：端口映射 &nbsp; 宿主机端口：docker端口</span></p><p style=\"text-align: justify;\"><span>--name：给启动容器起名字</span></p><p style=\"text-align: justify;\"><span><span>473aa6b18d58 &nbsp;：镜像id 或者 镜像名字也行</span><br></span></p><p style=\"text-align: justify;\"><span>/bin/bash : linux启动加载的</span></p><p style=\"text-align: justify;\"><span>[root@<span>a7bbefc5c0c8&nbsp;</span>/]#&nbsp;<br></span></p><p style=\"text-align: justify;\"><span><span>11.在<span>a7bbefc5c0c8 &nbsp;启动 tomcat&nbsp;</span></span></span></p><p style=\"text-align: justify;\"></p><p style=\"text-align: justify;\"><span>先加载jdk环境变量配置：</span></p><p style=\"text-align: justify;\"><span>[root@a7bbefc5c0c8 /]# source /etc/profile</span></p><p style=\"text-align: justify;\"><span>[root@a7bbefc5c0c8 /]# java -version</span></p><p><span><span>java version \"1.8.0_161\"<br>Java(TM) SE Runtime Environment (build 1.8.0_161-b12)<br>Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)<br></span></span></p><p style=\"text-align: justify;\"><span><span>[root@a7bbefc5c0c8 /]#&nbsp;</span></span></p><p style=\"text-align: justify;\"><span>启动 tomcat：</span></p><p style=\"text-align: justify;\"><span><span>[root@a7bbefc5c0c8 /]# ./usr/local/tomcat/apache-tomcat-8.5.29/bin/startup.sh&nbsp;<br>Using CATALINA_BASE: &nbsp; /usr/local/tomcat/apache-tomcat-8.5.29<br>Using CATALINA_HOME: &nbsp; /usr/local/tomcat/apache-tomcat-8.5.29<br>Using CATALINA_TMPDIR: /usr/local/tomcat/apache-tomcat-8.5.29/temp<br>Using JRE_HOME: &nbsp; &nbsp; &nbsp; &nbsp;/usr/local/jdk/jdk1.8.0_161<br>Using CLASSPATH: &nbsp; &nbsp; &nbsp; /usr/local/tomcat/apache-tomcat-8.5.29/bin/bootstrap.jar:/usr/local/tomcat/apache-tomcat-8.5.29/bin/tomcat-juli.jar<br>Tomcat started.<br></span></span></p><p style=\"text-align: justify;\"><span><span>[root@a7bbefc5c0c8 /]#&nbsp;</span></span></p><p style=\"text-align: justify;\"></p><p style=\"text-align: justify;\"><span><span>查看tomcat是否启动：</span></span></p><p style=\"text-align: justify;\"><span>[root@a7bbefc5c0c8 /]# ps -ef&nbsp;</span></p><p><span><span>UID &nbsp; &nbsp; &nbsp; &nbsp;PID &nbsp;PPID &nbsp;C STIME TTY &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;TIME CMD<br>root &nbsp; &nbsp; &nbsp; &nbsp; 1 &nbsp; &nbsp; 0 &nbsp;0 05:44 ? &nbsp; &nbsp; &nbsp; &nbsp;00:00:00 /bin/bash<br>root &nbsp; &nbsp; &nbsp; &nbsp;60 &nbsp; &nbsp; 1 &nbsp;2 05:54 ? &nbsp; &nbsp; &nbsp; &nbsp;00:00:03 /usr/local/jdk/jdk1.8.0_161/bin/java -Djava.util.logging.config.file=/usr/local/tomcat/apache-tomcat-8.5.29/conf/logging.properties -Djava.util.logging.manager=o<br>root &nbsp; &nbsp; &nbsp; 104 &nbsp; &nbsp; 1 &nbsp;0 05:56 ? &nbsp; &nbsp; &nbsp; &nbsp;00:00:00 ps -ef<br>[root@a7bbefc5c0c8 /]#&nbsp;<br></span></span></p><p style=\"text-align: justify;\">12. 后台启动dcoker</p><p style=\"text-align: justify;\">ctrl+p+q：后台运行docker</p><p style=\"text-align: justify;\">查看：</p><p style=\"text-align: justify;\"><span>[root@iZ2ze82p1dogve7neb5tuoZ /]# docker ps<br>CONTAINER ID &nbsp; &nbsp; &nbsp; &nbsp;IMAGE &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; COMMAND &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; CREATED &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; STATUS &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;PORTS &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;NAMES<br>a7bbefc5c0c8 &nbsp; &nbsp; &nbsp; &nbsp;473aa6b18d58 &nbsp; &nbsp; &nbsp; &nbsp;\"/bin/bash\" &nbsp; &nbsp; &nbsp; &nbsp; 19 minutes ago &nbsp; &nbsp; &nbsp;Up 19 minutes &nbsp; &nbsp; &nbsp; 0.0.0.0:8080-&gt;8080/tcp &nbsp; javaweb<br>[root@iZ2ze82p1dogve7neb5tuoZ /]#&nbsp;</span><br></p><p style=\"text-align: justify;\">13.现在在浏览器 输入 ip:8080 ，就可以看到tomcat主页了</p><p style=\"text-align: justify;\"><br></p><p style=\"text-align: justify;\">success!</p><div><br></div>', '0', '1523386877', '0', '3', '0', '0', '1523386877', '1523390174');
INSERT INTO `blog_articles` VALUES ('11', '1', '86', 'python os用法笔记', '2', 'python os用法笔记', '<h2><span>一、OS用法</span></h2><p style=\"text-align: justify;\">转自：<a href=\"https://www.cnblogs.com/breakcircle/p/6261566.html\" target=\"_blank\">https://www.cnblogs.com/breakcircle/p/6261566.html</a></p><p style=\"text-align: justify;\"></p><div class=\"blogpost-body\"><ul><li>获取文件所在路径</li><li>import os</li></ul><ol><li>os.path.dirname(__file__) &nbsp;获取当前文件的所在路径</li><li><p style=\"text-align: justify;\">print (os.path.dirname(os.path.dirname(__file__)))&nbsp;获取当前文件的所在目录的上级路径</p></li><li>print (os.path.dirname(os.path.dirname(os.path.dirname(__file__)))) &nbsp;获取当前文件的所在目录的上级目录的上级路径</li></ol><p style=\"text-align: justify;\">&nbsp;</p><p style=\"text-align: justify;\"><span>1. os.name()</span>——判断现在正在实用的平台，Windows 返回 ‘nt‘; Linux 返回’posix‘</p><p style=\"text-align: justify;\"><span>2. os.getcwd()</span>——得到当前工作的目录。</p><p style=\"text-align: justify;\"><span>3. os.listdir()</span>——指定所有目录下所有的文件和目录名。例：&nbsp;</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18115306-563e263ae8ca4292a4f7d0aef45434fe.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\">　　以列表的形式全部列举出来，其中没有区分目录和文件。</p><p style=\"text-align: justify;\"><span>4. os.remove()</span>——删除指定文件</p><p style=\"text-align: justify;\"><span>5. os.rmdir()</span>——删除指定目录</p><p style=\"text-align: justify;\"><span>6. os.mkdir()</span>——创建目录</p><p style=\"text-align: justify;\">　　注意：这样只能建立一层，要想递归建立可用：<span>os.makedirs()</span></p><p style=\"text-align: justify;\"><span>7. os.path.isfile()</span>——判断指定对象是否为文件。是返回True,否则False</p><p style=\"text-align: justify;\"><span>8. os.path.isdir()</span>——判断指定对象是否为目录。是True,否则False。例： &nbsp; &nbsp;</p><p style=\"text-align: justify;\">&nbsp; &nbsp;&nbsp;<img src=\"https://images0.cnblogs.com/blog/408927/201303/18120333-2852288070df441fb9aa31c7b53ab2bd.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\"><span>9. os.path.exists()</span>——检验指定的对象是否存在。是True,否则False.例：</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18120645-e705dcdabbde4f04ad8919c158b01dae.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\"><span>10. os.path.split()</span>——返回路径的目录和文件名。例：</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18120952-4c4bb37114c84fd9bcfbd1368648270f.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\">此处只是把前后两部分分开而已。就是找最后一个‘/‘。看例子：</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18121145-ef01b4e2b7ce49b0bdc4b9c675249322.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\"><span>11. os.getcwd()</span>——获得当前工作的目录（get current work dir)</p><p style=\"text-align: justify;\"><span>12. os.system()</span>——执行shell命令。例：</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18121413-b5594302ccec47b397a72aaa0b328a52.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\"><span>注意</span>：此处运行shell命令时，如果要调用python之前的变量，可以用如下方式：</p><div class=\"cnblogs_code\"><pre>var=123\nos.<span>environ</span>[‘var‘]=str(var) //注意此处[]内得是 “字符串”\nos.system(‘echo $var‘)</pre></div><p style=\"text-align: justify;\"><span>13. os.chdir()</span>——改变目录到指定目录</p><p style=\"text-align: justify;\"><span>14. os.path.getsize()</span>——获得文件的大小，如果为目录，返回0</p><p style=\"text-align: justify;\"><span>15. os.path.abspath()</span>——获得绝对路径。例：</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18122026-9b2c1165ae0d4ed3921d550d3b3d15d9.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\"><span>16. os.path.join(path, name)</span>——连接目录和文件名。例：</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18122325-2522900dab2848d3a876e3b7f3d49a5b.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\"><span>17.os.path.basename(path)</span>——返回文件名</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18122413-0bc29870c2814a34b9a574af305016ba.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\"><span>18. os.path.dirname(path)</span>——返回文件路径</p><p style=\"text-align: justify;\"><img src=\"https://images0.cnblogs.com/blog/408927/201303/18122449-f8d29510b96942e59d8f1ae81b80a851.png\" alt=\"技术分享\"></p><p style=\"text-align: justify;\"><span>19. 获得程序所在的实际目录</span></p><div class=\"cnblogs_code\"><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\" target=\"_blank\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div><pre>import os\nimport sys\n\nif __name__ == \"__main__\":\n    print os.path.realpath(sys.argv[0])\n    print os.path.split(os.path.realpath(sys.argv[0]))\n    print os.path.split(os.path.realpath(sys.argv[0]))[0]</pre><div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\" target=\"_blank\"><img src=\"https://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\"></a></span></div></div><p style=\"text-align: justify;\">执行结果</p><div class=\"cnblogs_Highlighter sh-gutter\"><div class=\"syntaxhighlighter css\"><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\" style=\"text-align: right;\">1</div><div class=\"line number2 index1 alt1\" style=\"text-align: right;\">2</div><div class=\"line number3 index2 alt2\" style=\"text-align: right;\">3</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"css plain\">/home/jihite/ftp/del.py</code></div><div class=\"line number2 index1 alt1\"><code class=\"css plain\">(</code><code class=\"css string\">‘/home/jihite/ftp‘</code><code class=\"css plain\">,&nbsp;</code><code class=\"css string\">‘del.py‘</code><code class=\"css plain\">)</code></div><div class=\"line number3 index2 alt2\"><code class=\"css plain\">/home/jihite/ftp　</code></div></div></td></tr></tbody></table></div></div><ul><li>os.path.split()把目录和文件区分开</li></ul><table border=\"0\" cellspacing=\"0\" cellpadding=\"0\" class=\"layui-table\"><tbody><tr><td class=\"gutter\"><div class=\"line number1 index0 alt2\">1</div><div class=\"line number2 index1 alt1\">2</div><div class=\"line number3 index2 alt2\">3</div><div class=\"line number4 index3 alt1\">4</div><div class=\"line number5 index4 alt2\">5</div></td><td class=\"code\"><div class=\"container\"><div class=\"line number1 index0 alt2\"><code class=\"css plain\">&gt;&gt;&gt; import os</code></div><div class=\"line number2 index1 alt1\"><code class=\"css plain\">&gt;&gt;&gt; os.path.split(</code><code class=\"css string\">\"a/b/c/d\"</code><code class=\"css plain\">)</code></div><div class=\"line number3 index2 alt2\"><code class=\"css plain\">(</code><code class=\"css string\">‘a/b/c‘</code><code class=\"css plain\">,&nbsp;</code><code class=\"css string\">‘d‘</code><code class=\"css plain\">)</code></div><div class=\"line number4 index3 alt1\"><code class=\"css plain\">&gt;&gt;&gt; os.path.split(</code><code class=\"css string\">\"a/b/c/d/\"</code><code class=\"css plain\">)</code></div><div class=\"line number5 index4 alt2\"><code class=\"css plain\">(</code><code class=\"css string\">‘a/b/c/d‘</code><code class=\"css plain\">,&nbsp;</code><code class=\"css string\">‘‘</code><code class=\"css plain\">)</code></div></div></td></tr></tbody></table><p style=\"text-align: justify;\">*********************</p><p style=\"text-align: justify;\">要执行的命令，相当于在Windows的cmd窗口中输入的命令。</p><p style=\"text-align: justify;\">如果是&nbsp;linux&nbsp;系统的话就是linux&nbsp;的&nbsp;终端输入的命令了</p><p style=\"text-align: justify;\">#coding=utf-8<br>from selenium import webdriver<br>import os<br>driver = webdriver.Firefox()<br>file_path = ‘file:///‘ + os.path.abspath(‘checkbox.html‘)<br>driver.get(file_path)</p><p style=\"text-align: justify;\">---------------------</p><ul><li>在Python 的os 模块中提供了system()用来执行系统命令。</li></ul><p style=\"text-align: justify;\">比如我们要执行E:\\\\test_object\\\\目录<br>下的all_test.py 文件，可以这样来实现：</p><p style=\"text-align: justify;\">#coding=utf-8<br>import os<br>os.system(‘E:\\\\test_object\\\\all_test.py‘)</p><p style=\"text-align: justify;\">或者</p><p style=\"text-align: justify;\">import os<br>os.chdir(\"E:\\\\test_object\")<br>os.system(‘Python all_test.py‘)</p><p style=\"text-align: justify;\">-----------------</p><ul><li>通过os.listdir()可以获取目录下的所有文件</li><li>通过os.path.getmtime(path) &nbsp;#返回在此path下最后一次修改的时间</li><li>通过<span>os.path.join(path, name)</span>连接目录和文件名</li></ul><p style=\"text-align: justify;\">#coding=utf-8<br>import os<br>#定义文件目录<br>result_dir = ‘E:\\\\test_object\\\\report‘<br>lists=os.listdir(result_dir)<br>#重新按时间对目录下的文件进行排列<br>lists.sort(key=lambda fn: os.path.getmtime(result_dir+\"\\\\\"+fn))<br>print (‘最新的文件为： ‘+lists[-1])<br>file = os.path.join(result_dir,lists[-1])<br>print file</p><p style=\"text-align: justify;\"><img src=\"https://images2015.cnblogs.com/blog/1086504/201703/1086504-20170327111129686-1477986372.png\" alt=\"\"></p><p style=\"text-align: justify;\"><br></p></div><h2><a name=\"t1\"></a><span>二、记录下os.path.dirname(__file__)使用</span></h2><p style=\"text-align: justify;\">（转自：<a href=\"https://blog.csdn.net/jojoy_tester/article/details/54598713\" target=\"_blank\">https://blog.csdn.net/jojoy_tester/article/details/54598713</a>）</p><h1 class=\"csdn_top\"><a name=\"t2\"></a></h1><h3><a name=\"t3\"></a><span>os.path.dirname(__file__)使用</span></h3><p style=\"text-align: justify;\"><span>该测试脚本所在的位置：D:\\第1层\\第2层\\第3层\\第4层\\第5层\\test11.py</span></p><p style=\"text-align: justify;\"><span>test11.py</span></p><div class=\"dp-highlighter bg_python\"><div class=\"bar\"><div class=\"tools\"><span>[python]</span>&nbsp;<a href=\"https://blog.csdn.net/jojoy_tester/article/details/54598713#\" class=\"ViewSource\" title=\"view plain\" target=\"_blank\">view plain</a><span class=\"tracking-ad\">&nbsp;<a href=\"https://blog.csdn.net/jojoy_tester/article/details/54598713#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_blank\">copy</a><div></div></span><div></div><span class=\"tracking-ad\"></span></div></div><ol start=\"1\" class=\"dp-py\"><li class=\"alt\"><span><span class=\"keyword\">import</span><span>&nbsp;os&nbsp;&nbsp;</span></span></li><li><span><span class=\"comment\">#该文件所在位置：D:\\第1层\\第2层\\第3层\\第4层\\第5层\\test11.py</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;</span></li><li><span>path1&nbsp;=&nbsp;os.path.dirname(__file__)&nbsp;&nbsp;</span></li><li class=\"alt\"><span><span class=\"keyword\">print</span><span>(path1)</span><span class=\"comment\">#获取当前运行脚本的绝对路径</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span>path2&nbsp;=&nbsp;os.path.dirname(os.path.dirname(__file__))&nbsp;<span class=\"comment\">#</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class=\"keyword\">print</span><span>(path2)</span><span class=\"comment\">#获取当前运行脚本的绝对路径（去掉最后一个路径）</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;</span></li><li><span>path3&nbsp;=&nbsp;os.path.dirname(os.path.dirname(os.path.dirname(__file__)))&nbsp;&nbsp;</span></li><li class=\"alt\"><span><span class=\"keyword\">print</span><span>(path3)</span><span class=\"comment\">#获取当前运行脚本的绝对路径（去掉最后2个路径）</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span>path4&nbsp;=&nbsp;os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))&nbsp;&nbsp;</span></li><li><span><span class=\"keyword\">print</span><span>(path4)</span><span class=\"comment\">#获取当前运行脚本的绝对路径（去掉最后3个路径）</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>&nbsp;&nbsp;</span></li><li><span>path5&nbsp;=&nbsp;os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))))&nbsp;&nbsp;</span></li><li class=\"alt\"><span><span class=\"keyword\">print</span><span>(path5)</span><span class=\"comment\">#获取当前运行脚本的绝对路径（去掉最后4个路径）</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span>path6&nbsp;=&nbsp;os.__file__&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"comment\">#获取os所在的目录</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class=\"keyword\">print</span><span>(path6)&nbsp;&nbsp;</span></span></li></ol></div><p><span>结果：</span></p><div class=\"dp-highlighter bg_python\"><div class=\"bar\"><div class=\"tools\"><span>[python]</span>&nbsp;<a href=\"https://blog.csdn.net/jojoy_tester/article/details/54598713#\" class=\"ViewSource\" title=\"view plain\" target=\"_blank\">view plain</a><span class=\"tracking-ad\">&nbsp;<a href=\"https://blog.csdn.net/jojoy_tester/article/details/54598713#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_blank\">copy</a><div></div></span><div></div><span class=\"tracking-ad\"></span></div></div><ol start=\"1\" class=\"dp-py\"><li class=\"alt\"><span><span>C:\\Python352\\python.exe&nbsp;D:/第</span><span class=\"number\">1</span><span>层/第</span><span class=\"number\">2</span><span>层/第</span><span class=\"number\">3</span><span>层/第</span><span class=\"number\">4</span><span>层/第</span><span class=\"number\">5</span><span>层/test11.py&nbsp;&nbsp;</span></span></li><li><span>D:/第<span class=\"number\">1</span><span>层/第</span><span class=\"number\">2</span><span>层/第</span><span class=\"number\">3</span><span>层/第</span><span class=\"number\">4</span><span>层/第</span><span class=\"number\">5</span><span>层&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>D:/第<span class=\"number\">1</span><span>层/第</span><span class=\"number\">2</span><span>层/第</span><span class=\"number\">3</span><span>层/第</span><span class=\"number\">4</span><span>层&nbsp;&nbsp;</span></span></li><li><span>D:/第<span class=\"number\">1</span><span>层/第</span><span class=\"number\">2</span><span>层/第</span><span class=\"number\">3</span><span>层&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>D:/第<span class=\"number\">1</span><span>层/第</span><span class=\"number\">2</span><span>层&nbsp;&nbsp;</span></span></li><li><span>D:/第<span class=\"number\">1</span><span>层&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span>C:\\Python352\\lib\\os.py&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li class=\"alt\"><span>Process&nbsp;finished&nbsp;with&nbsp;exit&nbsp;code&nbsp;<span class=\"number\">0</span><span>&nbsp;&nbsp;</span></span></li></ol></div><p style=\"text-align: justify;\"></p><p style=\"text-align: justify;\">解释：</p><p style=\"text-align: justify;\"><a href=\"http://blog.csdn.net/u011760056/article/details/46969883\" target=\"_blank\">http://blog.csdn.net/u011760056/article/details/46969883</a><br></p><p><span><span>os.path.dirname(__file__)返回脚本的路径，但是需要注意一下几点:</span></span></p><ul><li><span>必须是实际存在的.py文件，如果在命令行执行，则会引发异常NameError: name \'__file__\' is not defined；</span></li><li><span>在运行的时候如果输入完整的执行的路径，则返回.py文件的全路径如：Python c:/test/test.py 则返回路径 c:/test ，如果是python test.py 则返回空；</span></li><li><span><span><span>本人实验结果（</span><span>对原博主的补充</span><span>）：</span></span></span></li><li><span>实验1：（命令端）</span></li><li><span><span></span></span><div class=\"dp-highlighter bg_python\"><div class=\"bar\"><div class=\"tools\"><b>[python]</b>&nbsp;<a href=\"https://blog.csdn.net/huanhuanq1209/article/details/79840198#\" class=\"ViewSource\" title=\"view plain\" target=\"_self\">view plain</a><span class=\"tracking-ad\" data-mod=\"popu_168\">&nbsp;<a href=\"https://blog.csdn.net/huanhuanq1209/article/details/79840198#\" class=\"CopyToClipboard\" title=\"copy\" target=\"_self\">copy</a><div></div></span><span class=\"tracking-ad\" data-mod=\"popu_169\"></span></div></div><ol start=\"1\" class=\"dp-py\"><li class=\"alt\"><span><span class=\"comment\">#-*-&nbsp;coding:utf-8&nbsp;-*-</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"keyword\">import</span><span>&nbsp;os&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"comment\">#该文件所在位置：D:\\第1层\\第2层\\第3层\\第4层\\第5层\\test11.py&nbsp;&nbsp;</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"comment\">#1.</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"comment\">#path1&nbsp;=&nbsp;os.path.dirname(__file__)&nbsp;&nbsp;</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span><span class=\"comment\">#print&nbsp;(path1)#获取当前运行脚本的绝对路径&nbsp;&nbsp;</span><span>&nbsp;&nbsp;</span></span></li><li class=\"alt\"><span><span class=\"comment\">#2.</span><span>&nbsp;&nbsp;</span></span></li><li class=\"\"><span>path1=os.path.abspath(__file__)&nbsp;&nbsp;</span></li><li class=\"alt\"><span><span class=\"keyword\">print</span><span>&nbsp;(os.path.dirname(path1))&nbsp;&nbsp;</span></span></li></ol></div></li><li><span><img src=\"https://img-blog.csdn.net/20180407115142617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5odWFucTEyMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\"><br></span></li><li><span>实验二：（编译器）</span></li><li><span><img src=\"https://img-blog.csdn.net/2018040711575457?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1YW5odWFucTEyMDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"\"><br></span></li><li><span>结合os.path.abspath用，效果会好，如果大家看过一些python架构的代码的话，会发现经常有这样的组合：os.path.dirname(os.path.abspath(__file__)),os.path.abspath(__file__)返回的是.py文件的绝对路径。</span></li></ul><p style=\"text-align: justify;\"><span>这就是os.path.dirname(__file__)的用法，其主要总结起来有:</span></p><ul><li><span>不要在命令行的形式来进行os.path.dirname(__file__)这种形式来使用这个函数；</span></li><li><span>结合os.path.abspath()使用</span></li></ul>', '0', '1523387268', '0', '3', '0', '0', '1523387268', '1523390152');

-- ----------------------------
-- Table structure for blog_articles_categories
-- ----------------------------
DROP TABLE IF EXISTS `blog_articles_categories`;
CREATE TABLE `blog_articles_categories` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) DEFAULT '0' COMMENT '文章标识',
  `category_id` int(11) DEFAULT '0' COMMENT '类别标识',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章-类别';

-- ----------------------------
-- Records of blog_articles_categories
-- ----------------------------

-- ----------------------------
-- Table structure for blog_categories
-- ----------------------------
DROP TABLE IF EXISTS `blog_categories`;
CREATE TABLE `blog_categories` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(63) DEFAULT '' COMMENT '名称',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8 COMMENT='文章类别';

-- ----------------------------
-- Records of blog_categories
-- ----------------------------
INSERT INTO `blog_categories` VALUES ('1', 'centos', '0', '1521566605', '0');
INSERT INTO `blog_categories` VALUES ('2', '框架', '0', '1521566605', '0');
INSERT INTO `blog_categories` VALUES ('3', 'tomcat', '0', '1521566605', '0');
INSERT INTO `blog_categories` VALUES ('4', '前端', '0', '1521566605', '0');
INSERT INTO `blog_categories` VALUES ('5', 'java', '0', '1521566605', '0');
INSERT INTO `blog_categories` VALUES ('6', '杂记', '0', '1521566605', '0');

-- ----------------------------
-- Table structure for blog_comments
-- ----------------------------
DROP TABLE IF EXISTS `blog_comments`;
CREATE TABLE `blog_comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) DEFAULT '0' COMMENT '父级标识',
  `article_id` int(11) DEFAULT '0' COMMENT '文章标识',
  `user_id` int(11) DEFAULT '0' COMMENT '用户标识',
  `user_name` varchar(255) DEFAULT '' COMMENT '用户名称',
  `ip` varchar(64) DEFAULT '' COMMENT 'IP',
  `address` varchar(63) DEFAULT '' COMMENT '地址',
  `net` varchar(63) DEFAULT '' COMMENT '网络类型',
  `content` text COMMENT '主要内容',
  `display_at` int(11) DEFAULT '0' COMMENT '显示时间戳',
  `is_display` tinyint(1) DEFAULT '0' COMMENT '显示标识',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=71 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of blog_comments
-- ----------------------------
INSERT INTO `blog_comments` VALUES ('1', '0', '0', '1', 'ENDs', '', '天津', '联通', '感觉很舒适~', '1521961972', '0', '1', '1521961972', '1523013118');
INSERT INTO `blog_comments` VALUES ('2', '0', '0', '2', '北山北', '', '深圳', '移动', 'github或gitee求一波', '1521475832', '0', '0', '1521475832', '0');
INSERT INTO `blog_comments` VALUES ('3', '0', '0', '4', '难念的经的方式', '', '成都', '电信', '我也是，没有设计UI的能力，后台做好了一直没有前端<img src=\"http://www.wuyuanwei.com/common/layui/images/face/12.gif\" alt=\"[泪]\">', '1520558478', '1', '1', '1520558478', '1523013378');
INSERT INTO `blog_comments` VALUES ('4', '0', '0', '18', 'GMK', '', '郑州市', '联通', '我给你满分！<br>', '1514171066', '0', '0', '1514171066', '0');
INSERT INTO `blog_comments` VALUES ('5', '0', '0', '22', '新生', '', '合肥市', '电信', '1111', '1512826682', '0', '0', '1512826682', '1522912157');
INSERT INTO `blog_comments` VALUES ('6', '0', '0', '23', '随影sky', '', '重庆市', '电信', '博主大人，我看着甚是喜欢，希望能分享一下&nbsp;', '1511239408', '1', '0', '1511239408', '1523112595');
INSERT INTO `blog_comments` VALUES ('7', '0', '0', '23', '随影sky', '', '重庆市', '电信', '看着很不错呀！能分享一下源码吗？', '1511239355', '0', '0', '1511239355', '0');
INSERT INTO `blog_comments` VALUES ('8', '0', '0', '25', '良人', '', '南京市', '电信', '大佬，方便透露下服务器的配置哈？谢谢', '1511013962', '1', '0', '1511013962', '1523112592');
INSERT INTO `blog_comments` VALUES ('9', '0', '0', '26', 'ぺ灬cc果冻ル', '', '北京市', '电信', '来踩一下，网站好不错。', '1510276790', '0', '0', '1510276790', '0');
INSERT INTO `blog_comments` VALUES ('10', '0', '0', '27', '一一', '', '北京市', '方正宽带', '阔以啊老乡', '1510132023', '1', '0', '1510132023', '1523112594');
INSERT INTO `blog_comments` VALUES ('11', '6', '0', '29', '小青年的微笑', '', '郑州市', '联通', '加我qq 1049472547', '1511265422', '0', '1', '1511265422', '1523389858');
INSERT INTO `blog_comments` VALUES ('22', '8', '0', '29', '小青年的微笑', '', '郑州市', '联通', '阿里云服务器, 最低配置呀, 只不过我买的是香港的', '1511017114', '0', '1', '1511017114', '1523389856');
INSERT INTO `blog_comments` VALUES ('23', '10', '0', '29', '小青年的微笑', '', '郑州市', '联通', '哈哈', '1510145564', '0', '1', '1510145564', '1523389886');
INSERT INTO `blog_comments` VALUES ('24', '0', '0', '28', '我的征途是星辰大海', '', '郑州市', '联通', '666', '1509671146', '0', '0', '1509671146', '0');
INSERT INTO `blog_comments` VALUES ('25', '0', '0', '29', '小青年的微笑', '', '郑州市', '电信', '<img src=\"http://www.wuyuanwei.com/common/layui/images/face/2.gif\" alt=\"[哈哈]\"><img src=\"http://www.wuyuanwei.com/common/layui/images/face/1.gif\" alt=\"[嘻嘻]\"><img src=\"http://www.wuyuanwei.com/common/layui/images/face/3.gif\" alt=\"[可爱]\">哈哈', '1509614572', '0', '1', '1509614572', '1523013322');
INSERT INTO `blog_comments` VALUES ('26', '0', '0', '30', ' 庄生晓梦', '', '重庆市', '移动', 'qq登陆的弹窗是不是大了点，体验不是很好的，，另外网站做得不错<img src=\"http://www.wuyuanwei.com/common/layui/images/face/1.gif\" alt=\"[嘻嘻]\">', '1509033089', '0', '1', '1509033089', '1523013366');
INSERT INTO `blog_comments` VALUES ('27', '0', '0', '31', '小木鱼', '', '梧州市', '电信', '抄袭你的前台页面 &nbsp;， 你不介意吧 。<img src=\"http://www.wuyuanwei.com/common/layui/images/face/1.gif\" alt=\"[嘻嘻]\">', '1509022481', '0', '1', '1509022481', '1523013370');
INSERT INTO `blog_comments` VALUES ('28', '26', '0', '29', '小青年的微笑', '', '郑州市', '电信', '哈哈, 谢谢哈, qq弹窗主要是为了适应手机端, 更好的处理方式, 我还没想到呀. 哈哈, 看到别人夸, 我还是很骄傲的呀', '1509064236', '0', '0', '1509064236', '0');
INSERT INTO `blog_comments` VALUES ('29', '27', '0', '31', '小木鱼', '', '梧州市', '电信', '不介意', '1509022495', '0', '0', '1509022495', '0');
INSERT INTO `blog_comments` VALUES ('30', '27', '0', '31', '小木鱼', '', '梧州市', '电信', '下次不要了哦', '1509022520', '0', '0', '1509022520', '0');
INSERT INTO `blog_comments` VALUES ('31', '27', '0', '29', '小青年的微笑', '', '郑州市', '电信', '哈哈,没事哇, 不要要给我点个赞', '1509022806', '0', '0', '1509022806', '0');
INSERT INTO `blog_comments` VALUES ('34', '0', '0', '35', '', '', '', '', 'ACVBVGFDSASDFB', '0', '0', '1', '1522993802', '1523389883');
INSERT INTO `blog_comments` VALUES ('35', '0', '0', '35', '', '', '', '', 'dasdass', '1522994529', '0', '1', '1522994529', '1523389892');
INSERT INTO `blog_comments` VALUES ('36', '0', '0', '35', '', '', '', '', 'dasdassasdfsa', '1522994548', '0', '1', '1522994548', '1523013110');
INSERT INTO `blog_comments` VALUES ('37', '0', '0', '35', '', '', '', '', 'asdasd', '1522994615', '0', '1', '1522994615', '1523013108');
INSERT INTO `blog_comments` VALUES ('38', '0', '0', '35', '', '', '', '', 'dsadfgdsv', '1522994672', '0', '1', '1522994672', '1523389895');
INSERT INTO `blog_comments` VALUES ('39', '0', '0', '35', '', '', '', '', 'asdasa', '1522996154', '0', '1', '1522996154', '1523012983');
INSERT INTO `blog_comments` VALUES ('40', '39', '0', '35', '', '', '', '', 'ADASD', '1522999670', '0', '0', '1522999670', '0');
INSERT INTO `blog_comments` VALUES ('41', '39', '0', '35', '', '', '', '', 'ADASD', '1522999710', '0', '0', '1522999710', '0');
INSERT INTO `blog_comments` VALUES ('42', '39', '0', '35', '', '', '', '', 'ADASD', '1522999712', '0', '0', '1522999712', '0');
INSERT INTO `blog_comments` VALUES ('43', '39', '0', '35', '', '', '', '', 'ADASD', '1522999712', '0', '0', '1522999712', '0');
INSERT INTO `blog_comments` VALUES ('44', '39', '0', '35', '', '', '', '', 'ADASD', '1522999713', '0', '0', '1522999713', '0');
INSERT INTO `blog_comments` VALUES ('45', '39', '0', '35', '', '', '', '', 'ADASD', '1522999713', '0', '0', '1522999713', '0');
INSERT INTO `blog_comments` VALUES ('46', '39', '0', '35', '', '', '', '', 'ADASD', '1522999713', '0', '0', '1522999713', '0');
INSERT INTO `blog_comments` VALUES ('47', '39', '0', '35', '', '', '', '', 'ADASD', '1522999713', '0', '0', '1522999713', '0');
INSERT INTO `blog_comments` VALUES ('48', '39', '0', '35', '', '', '', '', 'ADASD', '1522999713', '0', '0', '1522999713', '0');
INSERT INTO `blog_comments` VALUES ('49', '39', '0', '35', '', '', '', '', 'ADASD', '1522999713', '0', '0', '1522999713', '0');
INSERT INTO `blog_comments` VALUES ('50', '39', '0', '35', '', '', '', '', 'ADASD', '1522999713', '0', '0', '1522999713', '0');
INSERT INTO `blog_comments` VALUES ('51', '25', '0', '35', '', '', '', '', 'sdad', '1522999817', '0', '0', '1522999817', '0');
INSERT INTO `blog_comments` VALUES ('52', '25', '0', '35', '', '', '', '', 'sdad', '1522999849', '0', '0', '1522999849', '0');
INSERT INTO `blog_comments` VALUES ('53', '25', '0', '35', '', '', '', '', 'sdad', '1522999849', '0', '0', '1522999849', '0');
INSERT INTO `blog_comments` VALUES ('54', '39', '0', '35', '', '', '', '', '', '1523000025', '0', '0', '1523000025', '0');
INSERT INTO `blog_comments` VALUES ('55', '38', '0', '35', '', '', '', '', '', '1523000030', '0', '1', '1523000030', '1523389893');
INSERT INTO `blog_comments` VALUES ('56', '1', '0', '35', '', '', '', '', '', '1523000033', '0', '0', '1523000033', '0');
INSERT INTO `blog_comments` VALUES ('57', '0', '0', '35', '', '', '', '', '我来咯！！！！！', '1523000525', '0', '1', '1523000525', '1523389896');
INSERT INTO `blog_comments` VALUES ('58', '0', '0', '37', '', '', '', '', '这是本人', '1523007311', '0', '0', '1523007311', '0');
INSERT INTO `blog_comments` VALUES ('59', '0', '0', '40', '', '', '', '', '第三次', '1523007593', '0', '1', '1523007593', '1523012959');
INSERT INTO `blog_comments` VALUES ('60', '58', '0', '40', '', '', '', '', '我来咯', '1523007603', '0', '0', '1523007603', '0');
INSERT INTO `blog_comments` VALUES ('61', '59', '0', '40', '', '', '', '', '', '1523008657', '0', '0', '1523008657', '0');
INSERT INTO `blog_comments` VALUES ('62', '59', '0', '40', '', '', '', '', 'asdsadfds', '1523008669', '0', '0', '1523008669', '0');
INSERT INTO `blog_comments` VALUES ('63', '59', '0', '40', '', '', '', '', '靠', '1523008693', '0', '0', '1523008693', '0');
INSERT INTO `blog_comments` VALUES ('64', '59', '0', '40', '', '', '', '', '靠靠靠', '1523008708', '0', '0', '1523008708', '0');
INSERT INTO `blog_comments` VALUES ('65', '59', '0', '40', '', '', '', '', '最后一次行吗？\n', '1523008756', '0', '0', '1523008756', '0');
INSERT INTO `blog_comments` VALUES ('66', '0', '0', '40', '', '', '', '', '难受死了', '1523008769', '0', '0', '1523008769', '1523012690');
INSERT INTO `blog_comments` VALUES ('67', '0', '0', '41', '', '', '', '', '第一次啊~~~', '1523053261', '0', '0', '1523053261', '1523389029');
INSERT INTO `blog_comments` VALUES ('68', '66', '0', '41', '', '', '', '', '怎么了？', '1523389108', '0', '0', '1523389108', '0');
INSERT INTO `blog_comments` VALUES ('69', '0', '0', '41', '', '', '', '', '来过', '1523390218', '1', '0', '1523390218', '1523390263');
INSERT INTO `blog_comments` VALUES ('70', '66', '0', '41', '', '', '', '', '没事，有我', '1523390228', '0', '0', '1523390228', '0');

-- ----------------------------
-- Table structure for blog_notes
-- ----------------------------
DROP TABLE IF EXISTS `blog_notes`;
CREATE TABLE `blog_notes` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT '0' COMMENT '用户标识（操作者标识）',
  `content` text COMMENT '内容',
  `display_at` int(11) DEFAULT '0' COMMENT '显示时间戳',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8 COMMENT='笔记';

-- ----------------------------
-- Records of blog_notes
-- ----------------------------
INSERT INTO `blog_notes` VALUES ('1', '1', '<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/34.gif\" alt=\"[钱]\">从腾讯云通过学生购取了一台服务器<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/34.gif\" alt=\"[钱]\">，开始搭建我的GIT、Apache、mysql了<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/33.gif\" alt=\"[睡]\">', '1510369871', '0', '0', '1523388571');
INSERT INTO `blog_notes` VALUES ('2', '1', '<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/7.gif\" alt=\"[害羞]\">初始版本的网站架构终于搭完了，<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/3.gif\" alt=\"[可爱]\">可以访问了，但是。。。<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/21.gif\" alt=\"[衰]\">还是别看了，美观方面还没开始考虑呢<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/21.gif\" alt=\"[衰]\">~~~', '1512055379', '0', '0', '1523388554');
INSERT INTO `blog_notes` VALUES ('3', '1', '<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/18.gif\" alt=\"[右哼哼]\">今天要开始毕业设计了<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/19.gif\" alt=\"[左哼哼]\">~~又能上坡坡老师的课了<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/8.gif\" alt=\"[挤眼]\">~~~', '1514257331', '0', '0', '1523388534');
INSERT INTO `blog_notes` VALUES ('4', '1', '<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/7.gif\" alt=\"[害羞]\">默默地~~网站的前台已经搭建完毕，终于。。。<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/22.gif\" alt=\"[委屈]\">可入目咯~~~', '1485782554', '0', '0', '1523388506');
INSERT INTO `blog_notes` VALUES ('5', '1', '<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/30.gif\" alt=\"[思考]\">今天要考试书写开题报告了~~<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/2.gif\" alt=\"[哈哈]\">同时，网页的内容开始动态渲染了~~<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/2.gif\" alt=\"[哈哈]\">不需要把数据填进HTML里面了~~~<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/2.gif\" alt=\"[哈哈]\">宣布PHP部署完成~~~', '1519745551', '0', '0', '1523388493');
INSERT INTO `blog_notes` VALUES ('6', '1', '<p>论文写好了<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/28.gif\" alt=\"[馋嘴]\">~但是问题一大堆<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/42.gif\" alt=\"[抓狂]\">。。。。我要改改改<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/12.gif\" alt=\"[泪]\">~<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/12.gif\" alt=\"[泪]\">~~<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/12.gif\" alt=\"[泪]\">~~~~~</p>', '1522848781', '0', '1522861270', '1523388466');
INSERT INTO `blog_notes` VALUES ('7', '1', '<p>今天毕业设计的网站终于完成了<img src=\"http://123.206.73.99/assets/plugin/layui-v1.0.9/images/face/2.gif\" alt=\"[哈哈]\"></p>', '1523200261', '0', '1522861462', '1523390305');

-- ----------------------------
-- Table structure for guest
-- ----------------------------
DROP TABLE IF EXISTS `guest`;
CREATE TABLE `guest` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `nickname` varchar(255) DEFAULT '' COMMENT '昵称',
  `avatar_id` varchar(255) DEFAULT '' COMMENT '头像',
  `ip` varchar(255) DEFAULT '' COMMENT 'IP号',
  `address` varchar(255) DEFAULT '' COMMENT '访问地址',
  `net_type` varchar(255) DEFAULT '' COMMENT '网络类型',
  `last_login_at` int(11) DEFAULT '0' COMMENT '最后登陆时间',
  `login_time` int(11) DEFAULT '0' COMMENT '访客令牌总时间',
  `expire_login_at` int(11) DEFAULT '0' COMMENT '过期时间',
  `expire_login_time` int(11) DEFAULT '0' COMMENT '离过期的总时间',
  `user_key` varchar(255) DEFAULT '' COMMENT '用户key',
  `is_blacklist` tinyint(1) DEFAULT '0' COMMENT '黑名单标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建标识',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新标识',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8 COMMENT='访客记录表';

-- ----------------------------
-- Records of guest
-- ----------------------------
INSERT INTO `guest` VALUES ('1', 'ENDs', '5', '', '', '', '0', '0', '0', '0', '6daaabcfb05810651b56a7fbda54cc3c', '0', '1521961972', '0', '0');
INSERT INTO `guest` VALUES ('2', '北山北', '6', '', '', '', '0', '0', '0', '0', '39174b45eaa0dc02124b93ac0dbc086f', '0', '1521475832', '0', '0');
INSERT INTO `guest` VALUES ('3', '生如夏花', '7', '', '', '', '0', '0', '0', '0', '2a38c528691f1d619ae35a3200619ef2', '0', '1520413004', '0', '0');
INSERT INTO `guest` VALUES ('4', '难念的经的方式', '8', '', '', '', '0', '0', '0', '0', '5b51ad8b0d2006dd9123ee80267a7b0c', '0', '1520558478', '0', '0');
INSERT INTO `guest` VALUES ('5', 'melon', '9', '', '', '', '0', '0', '0', '0', '146ac4964afdf35dd231a6e0f60596b1', '0', '1518267652', '0', '0');
INSERT INTO `guest` VALUES ('6', 'No旋律', '10', '', '', '', '0', '0', '0', '0', '1326332ac504c2a717d3c6e10962b45e', '0', '1520099248', '0', '0');
INSERT INTO `guest` VALUES ('7', 'AScorpio', '11', '', '', '', '0', '0', '0', '0', '5d851b4a8313052b781aace4210fc396', '0', '1521522219', '0', '0');
INSERT INTO `guest` VALUES ('8', '超☜', '12', '', '', '', '0', '0', '0', '0', 'fc91b9674bc6ecf6f91fb54aa036187d', '0', '1523142287', '0', '0');
INSERT INTO `guest` VALUES ('9', '阿拉蕾', '13', '', '', '', '0', '0', '0', '0', '0c210161430a3cdcaf9fc91cda1f07a4', '0', '1512802647', '0', '0');
INSERT INTO `guest` VALUES ('10', '威丶闲', '14', '', '', '', '0', '0', '0', '0', 'c09f422b7ad1459fb9f3ef5d22fd3dd7', '0', '1512928505', '0', '0');
INSERT INTO `guest` VALUES ('11', '要么瘦，要么死', '15', '', '', '', '0', '0', '0', '0', 'f3bf02f6425841773b219941686dcebe', '0', '1516234588', '0', '0');
INSERT INTO `guest` VALUES ('12', '不会飞的老鹰', '16', '', '', '', '0', '0', '0', '0', 'd15db32cf8f653edf75a6c4b59166ccb', '0', '1518216358', '0', '0');
INSERT INTO `guest` VALUES ('13', '泛泛之辈', '17', '', '', '', '0', '0', '0', '0', '9317aa51bcfa9391b85f7fb45fb65728', '0', '1518206961', '0', '0');
INSERT INTO `guest` VALUES ('14', '杰辉', '18', '', '', '', '0', '0', '0', '0', '1b770caacecef1b0e6690e7b39c083d5', '0', '1512214666', '0', '0');
INSERT INTO `guest` VALUES ('15', 'Mr.C丶', '19', '', '', '', '0', '0', '0', '0', '98a2d8381cbbcf0c274427715dbdb31a', '0', '1510623515', '0', '0');
INSERT INTO `guest` VALUES ('16', 'Violet', '20', '', '', '', '0', '0', '0', '0', 'd423c650295aeab83760f5e4a7f875c1', '0', '1520644645', '0', '0');
INSERT INTO `guest` VALUES ('17', '星宇无痕', '21', '', '', '', '0', '0', '0', '0', '2b5a6ab9afee4e5e2ee8ed018587f1d6', '0', '1518839482', '0', '0');
INSERT INTO `guest` VALUES ('18', 'GMK', '22', '', '', '', '0', '0', '0', '0', 'bba1afdc902bee5195fbe38ad202510a', '0', '1514171066', '0', '0');
INSERT INTO `guest` VALUES ('19', 'Gerry', '23', '', '', '', '0', '0', '0', '0', 'b4d84feeaccf0a9d1aa1793ce462b5cd', '0', '1522263477', '0', '0');
INSERT INTO `guest` VALUES ('20', 'King.', '24', '', '', '', '0', '0', '0', '0', 'bdb17071fbf86786c85cc12dcc963b41', '0', '1516456807', '0', '0');
INSERT INTO `guest` VALUES ('21', 'GMK', '28', '', '', '', '0', '0', '0', '0', '213e6b96e95841ecf2ca7f030c940c8d', '0', '1519664672', '0', '0');
INSERT INTO `guest` VALUES ('22', '新生', '29', '', '', '', '0', '0', '0', '0', '1c2e4b954f603a9bcccbe23045138d74', '0', '1512826682', '0', '0');
INSERT INTO `guest` VALUES ('23', '随影sky', '30', '', '', '', '0', '0', '0', '0', '1b5bce7ccd69a46da07c73270c9cf1cf', '0', '1511239408', '0', '0');
INSERT INTO `guest` VALUES ('24', '随影sky', '31', '', '', '', '0', '0', '0', '0', 'c6e8f706dec7ea1020ebb20ea6a9ff19', '0', '1510610808', '0', '0');
INSERT INTO `guest` VALUES ('25', '良人', '32', '', '', '', '0', '0', '0', '0', 'caa54942e3f666441f01a18bebf313af', '0', '1511013962', '0', '0');
INSERT INTO `guest` VALUES ('26', 'ぺ灬cc果冻ル', '33', '', '', '', '0', '0', '0', '0', 'afbd95e68b5ed6a3050bdc9fb41032e5', '0', '1510276790', '0', '0');
INSERT INTO `guest` VALUES ('27', '一一', '34', '', '', '', '0', '0', '0', '0', 'f8345e3adf48e1b928668ae92d405a6e', '0', '1510132023', '0', '0');
INSERT INTO `guest` VALUES ('28', '我的征途是星辰大海', '35', '', '', '', '0', '0', '0', '0', '51db3f754114de3b49b58a0e6c8df0c9', '0', '1509671146', '0', '0');
INSERT INTO `guest` VALUES ('29', '小青年的微笑', '36', '', '', '', '0', '0', '0', '0', '8a06dfb1dd49de801d850dd8cfcc4be0', '0', '1511265422', '0', '0');
INSERT INTO `guest` VALUES ('30', ' 庄生晓梦', '37', '', '', '', '0', '0', '0', '0', '13cbd01b0412dd7fcb84b2dd22fc9b91', '0', '1509033089', '0', '0');
INSERT INTO `guest` VALUES ('31', '小木鱼', '38', '', '', '', '0', '0', '0', '0', '29a5bd638290ba1a15517f527a066596', '0', '1509022481', '0', '0');
INSERT INTO `guest` VALUES ('35', 'ASDSASDSA', '66', '', '', '', '0', '0', '0', '0', 'b7280ab24379183e226b7e42215837661522993713', '0', '1522993802', '0', '0');
INSERT INTO `guest` VALUES ('36', 'Moting', '67', '', '', '', '0', '0', '0', '0', '', '0', '1523003862', '0', '0');
INSERT INTO `guest` VALUES ('37', 'MOting', '68', '', '', '', '0', '0', '0', '0', '9084e7231efda931d4e0edf1db61e42b1523003909', '0', '1523003909', '0', '0');
INSERT INTO `guest` VALUES ('38', 'NewBoy', '69', '', '', '', '0', '0', '0', '0', '', '0', '1523007369', '0', '0');
INSERT INTO `guest` VALUES ('39', '旭东', '70', '', '', '', '0', '0', '0', '0', '', '0', '1523007494', '0', '0');
INSERT INTO `guest` VALUES ('40', '峰', '71', '', '', '', '0', '0', '0', '0', '894d734a9c114a3276eb0c793014bdec', '0', '1523007572', '1523007573', '0');
INSERT INTO `guest` VALUES ('41', 'Boss', '72', '', '', '', '0', '0', '0', '0', 'dbb11ad51bdc067d332163d1ae6a7147', '0', '1523053259', '1523053259', '0');

-- ----------------------------
-- Table structure for guest_unique
-- ----------------------------
DROP TABLE IF EXISTS `guest_unique`;
CREATE TABLE `guest_unique` (
  `id` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of guest_unique
-- ----------------------------
INSERT INTO `guest_unique` VALUES ('0');

-- ----------------------------
-- Table structure for migration
-- ----------------------------
DROP TABLE IF EXISTS `migration`;
CREATE TABLE `migration` (
  `type` varchar(25) NOT NULL,
  `name` varchar(50) NOT NULL,
  `migration` varchar(100) NOT NULL DEFAULT ''
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of migration
-- ----------------------------

-- ----------------------------
-- Table structure for systems_logs
-- ----------------------------
DROP TABLE IF EXISTS `systems_logs`;
CREATE TABLE `systems_logs` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ex` varchar(4069) DEFAULT '' COMMENT '拓展',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='系统记录';

-- ----------------------------
-- Records of systems_logs
-- ----------------------------

-- ----------------------------
-- Table structure for temp
-- ----------------------------
DROP TABLE IF EXISTS `temp`;
CREATE TABLE `temp` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of temp
-- ----------------------------

-- ----------------------------
-- Table structure for users_extends
-- ----------------------------
DROP TABLE IF EXISTS `users_extends`;
CREATE TABLE `users_extends` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT '0' COMMENT '用户标识',
  `nickname` varchar(255) DEFAULT '' COMMENT '昵称',
  `truename` varchar(255) DEFAULT '' COMMENT '真实姓名',
  `age` smallint(6) DEFAULT '0' COMMENT '年龄',
  `gender` tinyint(1) DEFAULT '0' COMMENT '性别',
  `birth` varchar(17) DEFAULT '' COMMENT '生日',
  `avatar` varchar(255) DEFAULT '' COMMENT '头像',
  `career` varchar(127) DEFAULT '' COMMENT '职业',
  `summary` varchar(255) DEFAULT '' COMMENT '个人介绍',
  `explanation` varchar(1024) DEFAULT '' COMMENT '个人说明',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='用户-权限';

-- ----------------------------
-- Records of users_extends
-- ----------------------------
INSERT INTO `users_extends` VALUES ('1', '1', 'ends', '雨暮青', '0', '0', '', '', '', '', '', '1520779185', '0');
INSERT INTO `users_extends` VALUES ('2', '3', '', '', '0', '1', '20180320', '', '', '', '', '1521394574', '0');
INSERT INTO `users_extends` VALUES ('3', '2', '', '', '0', '0', '', '', '', '', '', '0', '0');
INSERT INTO `users_extends` VALUES ('4', '4', '', '', '0', '1', '20180321', '', '', '', '', '1521394702', '0');
INSERT INTO `users_extends` VALUES ('5', '5', '', '', '0', '1', '20180322', '', '', '', '', '1521395070', '0');
INSERT INTO `users_extends` VALUES ('6', '6', '', '', '0', '1', '20180322', '', '', '', '', '1521472731', '0');

-- ----------------------------
-- Table structure for users_permissions
-- ----------------------------
DROP TABLE IF EXISTS `users_permissions`;
CREATE TABLE `users_permissions` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `user_id` int(11) DEFAULT '0' COMMENT '用户标识',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '删除标识',
  `is_user` tinyint(1) DEFAULT '0' COMMENT '用户标识',
  `is_article` tinyint(1) DEFAULT '0' COMMENT '文章标识',
  `is_resource` tinyint(1) DEFAULT '0' COMMENT '资源标识',
  `is_note` tinyint(1) DEFAULT '0' COMMENT '笔记标识',
  `is_login` tinyint(1) DEFAULT '0' COMMENT '登陆标识',
  `is_manager` tinyint(1) DEFAULT '0' COMMENT '管理员标识',
  `is_admin` tinyint(1) DEFAULT '0' COMMENT '超级管理员标识',
  `is_blacklist` tinyint(1) DEFAULT '0',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  `last_login_at` int(11) DEFAULT '0' COMMENT '最后登录标识',
  `ip` varchar(63) DEFAULT '' COMMENT 'ip',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='用户-权限';

-- ----------------------------
-- Records of users_permissions
-- ----------------------------
INSERT INTO `users_permissions` VALUES ('1', '1', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1520779185', '0', '0', '');
INSERT INTO `users_permissions` VALUES ('2', '2', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '');
INSERT INTO `users_permissions` VALUES ('3', '3', '0', '1', '0', '0', '0', '1', '0', '0', '0', '1521394574', '0', '0', '');
INSERT INTO `users_permissions` VALUES ('4', '4', '0', '1', '0', '0', '0', '1', '0', '0', '0', '1521394702', '0', '0', '');
INSERT INTO `users_permissions` VALUES ('5', '5', '0', '1', '0', '0', '0', '1', '0', '0', '0', '1521395070', '0', '0', '');
INSERT INTO `users_permissions` VALUES ('6', '6', '0', '1', '0', '0', '0', '1', '0', '0', '0', '1521472731', '0', '0', '');

-- ----------------------------
-- Table structure for users_users
-- ----------------------------
DROP TABLE IF EXISTS `users_users`;
CREATE TABLE `users_users` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT '' COMMENT '账号',
  `email` varchar(255) DEFAULT '' COMMENT '邮箱',
  `group` int(11) DEFAULT '0' COMMENT '用户组',
  `group_id` int(11) DEFAULT '0',
  `password` varchar(255) DEFAULT '' COMMENT '密码',
  `profile_fields` varchar(255) DEFAULT '' COMMENT '配置领域',
  `last_login` varchar(255) DEFAULT '' COMMENT '最后登录',
  `previous_login` varchar(255) DEFAULT '',
  `login_hash` varchar(255) DEFAULT '' COMMENT '登陆哈希值',
  `created_at` int(11) DEFAULT '0' COMMENT '创建时间戳',
  `updated_at` int(11) DEFAULT '0' COMMENT '更新时间戳',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='用户-权限';

-- ----------------------------
-- Records of users_users
-- ----------------------------
INSERT INTO `users_users` VALUES ('1', 'Ends', 'cdy886@qq.com', '1', '0', 'rWjGqnoaQcL+plHNS2AUIBzdvlVifmCfeIhoivHaiVI=', 'a:0:{}', '1523380027', '', '8d8d42f1a636418e357a07be1a60b7db303c51a2', '1520779185', '0');
INSERT INTO `users_users` VALUES ('2', 'z20180319', 'z20180319@yujian.com', '1', '0', '9goMtRFM5IdQkAyIPcf5zpydF71M3+bxcCGLxBPuqLE=', 'a:0:{}', '0', '', '', '1521394504', '0');
INSERT INTO `users_users` VALUES ('3', 'z20180320', 'z20180320@yujian.com', '1', '0', '9goMtRFM5IdQkAyIPcf5zpydF71M3+bxcCGLxBPuqLE=', 'a:0:{}', '0', '', '', '1521394574', '0');
INSERT INTO `users_users` VALUES ('4', 'z20180321', 'z20180321@yujian.com', '1', '0', '9goMtRFM5IdQkAyIPcf5zpydF71M3+bxcCGLxBPuqLE=', 'a:0:{}', '0', '', '', '1521394702', '0');
INSERT INTO `users_users` VALUES ('5', 'z20180322', 'z20180322@yujian.com', '1', '0', '9goMtRFM5IdQkAyIPcf5zpydF71M3+bxcCGLxBPuqLE=', 'a:0:{}', '0', '', '', '1521395070', '0');
INSERT INTO `users_users` VALUES ('6', 'z20180324', 'z20180324@yujian.com', '1', '0', '9goMtRFM5IdQkAyIPcf5zpydF71M3+bxcCGLxBPuqLE=', 'a:0:{}', '0', '', '', '1521472730', '0');
